from datetime import datetime, time
import multiprocessing
from multiprocessing import freeze_support
import time as tm
import random


def calculateDelegateScoreOLD(delegate_preferences, schedule):
    # Initialize variables to count the number of preferred talks and attended talks
    numDesired = 0
    numAttended = 0

    for record in delegate_preferences:
        if record[1] >= 6:
            numDesired += 1
    
    # Iterate through each day in the schedule
    for day, timeslots in schedule.items():
        # Initialize a counter to track the number of highly rated talks attended by the delegate for each timeslot
        attendedPerTimeslot = {timeslot: 0 for timeslot in timeslots}
        
        # Iterate through each timeslot in the day
        for timeslot in timeslots:
            # Iterate through all talks scheduled in the timeslot
            for talkId in timeslots[timeslot]:
                # Check if the talk is in the delegate's preferences and if it's highly rated
                for preference in delegate_preferences:
                    if preference[0] == talkId and preference[1] >= 6:  # Assuming a score of 6 or higher is considered highly rated
                        # Check if the number of highly rated talks attended in the timeslot is not greater than 1
                        if attendedPerTimeslot[timeslot] < 1:
                            # Increment the counter for attended highly rated talks in the timeslot
                            attendedPerTimeslot[timeslot] += 1
                            numAttended += 1
                            break  # Break out of the loop once a highly rated talk is attended
    
    # Calculate the percentage of preferred talks attended
    attendedPercent = numAttended / numDesired
    return 1 if attendedPercent >= 0.65 else 0 
'''
def worker(delegateId, delegPrefs, schedule):
    # Worker function to calculate score for a single delegate
    records = delegPrefs[delegateId]
    return calculateDelegateScore(records, schedule)

def calculateScheduleScoreParallel(schedule, deleg_likes_talks):
    total_score = 0
    delegPrefs = {
        # DelegateId1 : [[talkId, score], [talkId, score], [talkId, score] ... ],
        # DelegateId2 : [[talkId, score], [talkId, score], [talkId, score] ... ]
    }

    for record in deleg_likes_talks:
        if record[1] not in delegPrefs:
            delegPrefs[record[1]] = []
        delegPrefs[record[1]].append([record[0], record[2]])

    # Determine the number of processes to use
    num_processes = min(multiprocessing.cpu_count(), len(delegPrefs))
    
    # Create a multiprocessing pool
    with multiprocessing.Pool(processes=num_processes) as pool:
        # Calculate scores for each delegate in parallel using map function
        scores = pool.starmap(worker, [(delegate_id, delegPrefs, schedule) for delegate_id in delegPrefs.keys()])

        # Sum up the scores for all delegates
        total_score = sum(scores)

    # Normalize the total score by the number of delegates and return
    return int(round((total_score / len(delegPrefs) * 100)))
'''
def calculateDelegateScore(delegate_preferences, schedule): # REMOVE POPULATION LATER
    # Use a dictionary to map talk IDs to ratings for fast lookup
    preference_dict = {pref[0]: pref[1] for pref in delegate_preferences if pref[1] >= 6}
    numDesired = len(preference_dict)
    numAttended = 0

    # Return early if there are no desired talks
    if numDesired == 0:
        return 0

    # Iterate through each day in the schedule
    for day, timeslots in schedule.items():
        # Track attended talks in each timeslot to avoid double counting
        attended_per_timeslot = set()

        # Iterate through each timeslot
        for timeslot, talks in timeslots.items():
            # Process each talk in the timeslot
            for talkId in talks:
                if talkId in preference_dict and preference_dict[talkId] > 6 and talkId not in attended_per_timeslot:
                    attended_per_timeslot.add(talkId)
                    numAttended += 1

    # Calculate the percentage of preferred talks attended
    attendedPercent = numAttended / numDesired
    return 1 if attendedPercent >= 0.65 else 0

def worker(delegateId, delegPrefs, schedule): # REMOVE POPULATION LATER
    records = delegPrefs.get(delegateId, [])
    return calculateDelegateScore(records, schedule)

def calculateScheduleScoreParallel(schedule, deleg_likes_talks): # REMOVE POPULATION LATER
    delegPrefs = {}
    for record in deleg_likes_talks:
        delegPrefs.setdefault(record[1], []).append([record[0], record[2]])

    num_processes = min(multiprocessing.cpu_count(), len(delegPrefs))

    with multiprocessing.Pool(processes=num_processes) as pool:
        scores = pool.starmap(worker, [(delegate_id, delegPrefs, schedule) for delegate_id in delegPrefs.keys()])
        total_score = sum(scores)

    return int(round((total_score / len(delegPrefs) * 100))) if delegPrefs else 0

populationSize = 75
mutateRate = 0.3
generations = 10 # 100

# An individual is a schedule
def createRanIndividual(AvailableSlots, TalkInfo, numSessions):
    # Creating a random schedule (individual)
    individual = AvailableSlots
    ids = []
    for talk in TalkInfo:
        if talk[0] not in ids:
            ids.append(talk[0])
    # Random assignment
    random.shuffle(ids)
    random.shuffle(ids)
    random.shuffle(ids)
    assigned = []
    for day, agenda in individual.items():
        for time, slots in agenda.items():
            if slots == []:
                for i in range(numSessions): 
                    individual[day][time].append('None')
    # Randomly choose whether or not to assign a random talk to a specific time slot
    for day, agenda in individual.items():
        for time, slots in agenda.items():
            for i in range(numSessions):
                scheduleSmth = random.randint(0, 10) # 0 counts as false in python
                if scheduleSmth % 3 == 0:
                    talk = random.choice(ids)
                    choiceCount = 1
                    while talk in assigned:
                        if choiceCount == len(ids):
                            talk = 'None'
                        if talk not in assigned:
                            break
                        talk = random.choice(ids)
                        choiceCount += 1
                    individual[day][time][i] = talk
                    if talk != 'None':
                        assigned.append(talk)
    return individual

def generatePopulation(populationSize):
    population = []
    for _ in range(populationSize):
        individual = createRanIndividual(AvailableSlots, TalkInfo, numSessions)
        population.append(individual)
    return population

def evalFitness(population, Deleg2Talks):
    fitnessScores = []
    for individual in population:
        # A score will be evaluated based on the evaluation metric
        #print(individual)
        score = calculateScheduleScoreParallel(individual, Deleg2Talks) # REMOVE POPULATION LATER
        fitnessScores.append(score)
    return fitnessScores

def selectParents(population, fitnessScores, candidates4Tournie=round(populationSize / 5)):
    # Use tournament selection to choose parents to produce offspring
    selected = []
    for count in range(len(population)):
        # Randomly select a subset of schedules
        pool = random.sample(list(zip(population, fitnessScores)), k=candidates4Tournie)
        #print(pool)
        # Choose the schedule with the highest fitness score from the subset
        select = max(pool, key=lambda x: x[1])[0]
        selected.append(select)

    return selected

def crossover(parents, numSessions):
    children = []
    loop = -1
    if len(parents) % 2 == 0:
        loop = len(parents)
    else:
        loop =  len(parents) - 1
    for i in range(0, loop, 2): # For a pair of parents as a time from the selection
        parent1 = parents[i]
        parent2 = parents[i+1]

        for i in range(2):
            child = twoPointCrossover(parent1, parent2, numSessions)
            children.append(child)

        '''# Perform crossover to create children
        child = {}
        for i in range(2): # Having two kids
            for day in parent1.keys():
                child[day] = {}
                for slot in parent1[day].keys():
                    # Randomly choose crossover point
                    crossover = random.randint(0, numSessions)
                    # Combine talks from parents
                    child[day][slot] = parent1[day][slot][:crossover] + parent2[day][slot][crossover:]
            children.append(child)'''

    return children

def twoPointCrossover(parent1, parent2, numSessions):
     # Two-point crossover
    child = {}
    for day in parent1.keys():
        child[day] = {}
        for slot in parent1[day].keys():
            point1, point2 = sorted(random.sample(range(numSessions), 2))
            child[day][slot] = parent1[day][slot][:point1] + parent2[day][slot][point1:point2] + parent1[day][slot][point2:]
    return child

def updateMutationRate(mutateRate, prevAvgFitness, currentAvgFitness):
    # Reduce mutation rate based on improvement of fitness
    improvement = currentAvgFitness - prevAvgFitness
    if improvement > 0:
        # Reduce mutation rate by a percentage proportional to the improvement
        mutateRate *= (1 - (improvement / currentAvgFitness))
    mutateRate = max(mutateRate, 0.01)  # Ensure mutation rate doesn't drop below a minimum threshold
    return mutateRate

def mutateOLD(individual, mutateRate):
    mutatedInd = individual.copy() # Copy the original schedule
    
    def swap(slot1, slot2):
        talk1 = random.choice(slot1)
        talk2 = random.choice(slot2)
        ind1 = slot1.index(talk1)
        ind2 = slot2.index(talk2)

        slot1[ind1] = talk2
        slot2[ind2] = talk1

        return slot1, slot2
    
    def move(talks, timing, timeslots, day):
        # Randomly select a talk to move within the currently observed slot
        talkToMove = random.choice(talks)
        # Remove selected talk from current slot
        place = talks.index(talkToMove)
        mutatedInd[day][timing][place] = 'None'

        # Randomly select a destination timeslot
        destination = random.choice(timeslots)
        found = False
        tried = [destination]
        while not found:
            # Add the talk to the destination if there is space
            if 'None' in mutatedInd[day][destination]:
                place = mutatedInd[day][destination].index('None')
                mutatedInd[day][destination][place] = talkToMove
                found = True
            else:
                # Otherwise choose another destination
                destination = random.choice(timeslots)
                tried.append(destination)
            if len(destination) == len(timeslots) and not found:
                return False
        if found == True:
            return True

    for day, agenda in mutatedInd.items():
        timeslots = list(agenda.keys())
        for ind, key in enumerate(timeslots):
            # index of timeslots, actual timing
            timing = key
            slots = agenda[key]
            if random.random() < mutateRate:
                # Perform mutation based on the chosen mutation type
                mutationType = random.choice(['swap', 'move'])
                if mutationType == 'swap':
                    # Swap two talks within the parallel-level / sequence of timings
                    if ind < len(agenda) - 1:
                        nextTiming = timeslots[ind + 1]
                        #mutatedInd[day][timing], mutatedInd[day][nextTiming] = swap(mutatedInd[day][timing], mutatedInd[day][nextTiming])
                        swap(mutatedInd[day][timing], mutatedInd[day][nextTiming])
                    if ind > 0:
                        prevTiming = timeslots[ind - 1]
                        #mutatedInd[day][timing], mutatedInd[day][prevTiming] = swap(mutatedInd[day][timing], mutatedInd[day][prevTiming])
                        swap(mutatedInd[day][timing], mutatedInd[day][prevTiming])
                else:
                    # Move a talk to a different timeslot within the same day
                    moved = move(slots, timing, timeslots, day)
                    if not moved:
                        # Swap two talks within the parallel-level / sequence of timings
                        if ind < len(agenda) - 1:
                            nextTiming = agenda[ind + 1]
                            mutatedInd[day][timing], mutatedInd[day][nextTiming] = swap(mutatedInd[day][timing], mutatedInd[day][nextTiming])
                        if ind > 0:
                            prevTiming = agenda[ind + 1]
                            mutatedInd[day][timing], mutatedInd[day][prevTiming] = swap(mutatedInd[day][timing], mutatedInd[day][prevTiming])
    return mutatedInd

def mutate(individual, mutateRate):
    mutatedInd = individual.copy() # Copy the original individual
    # Mutate a given schedule by performing swap, move, and inverse mutations
    
    def swapTalks(talks):
        """Swap two talks within the same slot at random."""
        if len(talks) > 1:
            i1, i2 = random.sample(range(len(talks)), 2)
            talks[i1], talks[i2] = talks[i2], talks[i1]
        
        return talks

    def swapSlot(slots):
        """Swap two slots within the same day at random."""
        if len(slots) > 1:
            i1, i2 = random.sample(range(len(slots)), 2)
            slot1 = list(slots.keys())[i1]
            slot2 = list(slots.keys())[i2]
            slots[slot1], slots[slot2] = slots[slot2], slots[slot1]

        return slots

    def move(slots):
        """Move a talk from one time slot to another within the same day."""
        sourceSlot = random.choice(list(slots.keys()))
        destSlot = random.choice(list(slots.keys()))
        if slots[sourceSlot]:
            talk = slots[sourceSlot].pop(random.randint(0, len(slots[sourceSlot]) - 1))
            slots[destSlot].append(talk)
        
        return slots

    def inverse(slots):
        """Reverse the order of slots between two random points."""
        slotkeys = list(slots.keys())
        if len(slotkeys) > 1:
            start, end = sorted(random.sample(range(len(slotkeys)), 2))
            # Reverse only the slot order between the selected indices
            subsetKeys = slotkeys[start:end + 1]
            reversedSlots = {k: slots[k] for k in reversed(subsetKeys)}
            for i, k in enumerate(subsetKeys):
                slots[k] = reversedSlots[k]
        
        return slots

    for day, slots in mutatedInd.items():
        for slot, talks in slots.items():
            if random.random() < mutateRate:  # Probability to perform swap on entire time-slot list
                mutatedInd[day][slot] = swapTalks(talks)
        if random.random() < mutateRate:  # Probability to perform swap on entire time-slot list
            mutatedInd[day] = swapSlot(slots)
        if random.random() < mutateRate:  # Probability to perform move
            mutatedInd[day] = move(slots)
        if random.random() < mutateRate / 2:  # Reduced probability for inverse due to its disruptive nature
            mutatedInd[day] = inverse(slots)
        
    return mutatedInd

def selectiveElistism(population, fitnessScores, genNo, generations, eliteProport=0.1):
    # Elitism takes place during the beginning or final proportion of generations NOT all the time
    if genNo <= generations * 0.1 or genNo >= generations * 0.9:
        numElites = int(len(population) * eliteProport)
        eliteIndices = sorted(range(len(fitnessScores)), key=lambda x: fitnessScores[x], reverse=True)[:numElites]
        elites = [population[i] for i in eliteIndices]
        print("Elitism applied")
    else:
        elites = []
    return elites

''' HOW IT MIGHT WORK - OLD
# Initialize population
population = generate_initial_population()

# Iterate through generations
for generation in range(num_generations):
    # Evaluate fitness of each schedule in the population
    fitness_scores = evaluate_fitness(population)
    
    # Select parents for crossover
    selected_parents = select_parents(population, fitness_scores)
    
    # Perform crossover to create new generation
    children = crossover(selected_parents)
    
    # Mutate children
    mutated_children = mutate(children)
    
    # Replace old population with new generation
    population = mutated_children

# Select best schedule as optimized solution
best_schedule = select_best_schedule(population)
'''

# For METAL-CON 2024
numSessions = 3
Deleg2Talks = [
    [41, 208, 9],
    [41, 209, 10],
    [41, 210, 10],
    [41, 211, 10],
    [41, 212, 5],
    [41, 213, 6],
    [41, 214, 8],
    [41, 215, 5],
    [41, 216, 1],
    [41, 217, 1],
    [41, 218, 10],
    [41, 219, 8],
    [41, 220, 9],
    [41, 221, 3],
    [41, 222, 9],
    [41, 223, 6],
    [41, 224, 10],
    [41, 225, 1],
    [41, 226, 7],
    [41, 227, 3],
    [41, 228, 5],
    [41, 229, 7],
    [41, 230, 7],
    [41, 231, 5],
    [41, 232, 7],
    [41, 233, 10],
    [41, 234, 10],
    [41, 235, 1],
    [41, 236, 10],
    [41, 237, 1],
    [41, 238, 3],
    [41, 239, 3],
    [41, 240, 7],
    [41, 241, 3],
    [41, 242, 5],
    [41, 243, 1],
    [41, 244, 8],
    [41, 245, 1],
    [41, 246, 7],
    [41, 247, 9],
    [41, 248, 7],
    [41, 249, 2],
    [41, 250, 9],
    [41, 251, 4],
    [41, 252, 10],
    [41, 253, 2],
    [41, 254, 8],
    [41, 255, 10],
    [41, 256, 3],
    [41, 257, 2],
    [41, 258, 5],
    [41, 259, 6],
    [41, 260, 1],
    [41, 261, 4],
    [41, 262, 6],
    [41, 263, 7],
    [41, 264, 5],
    [41, 265, 1],
    [41, 266, 9],
    [41, 267, 4],
    [41, 268, 2],
    [41, 269, 5],
    [41, 270, 8],
    [41, 271, 10],
    [41, 272, 9],
    [41, 273, 5],
    [41, 274, 3],
    [41, 275, 6],
    [41, 276, 3],
    [41, 277, 9],
    [41, 278, 9],
    [41, 279, 4],
    [41, 280, 7],
    [41, 281, 9],
    [41, 282, 8],
    [41, 283, 2],
    [41, 284, 4],
    [41, 285, 10],
    [41, 286, 4],
    [41, 287, 2],
    [41, 288, 8],
    [41, 289, 9],
    [41, 290, 7],
    [41, 291, 5],
    [41, 292, 3],
    [41, 293, 7],
    [41, 294, 5],
    [41, 295, 6],
    [41, 296, 1],
    [41, 297, 6],
    [41, 298, 1],
    [41, 299, 9],
    [41, 300, 10],
    [41, 301, 6],
    [41, 302, 6],
    [41, 303, 3],
    [41, 304, 3],
    [41, 305, 7],
    [41, 306, 4],
    [41, 307, 1],
    [41, 308, 6],
    [41, 309, 1],
    [41, 310, 4],
    [41, 311, 9],
    [41, 312, 6],
    [41, 313, 1],
    [41, 314, 6],
    [41, 315, 3],
    [41, 316, 2],
    [41, 317, 10],
    [41, 318, 2],
    [41, 319, 7],
    [41, 320, 7],
    [41, 321, 5],
    [41, 322, 10],
    [41, 323, 4],
    [41, 324, 10],
    [41, 325, 6],
    [41, 326, 6],
    [41, 327, 5],
    [41, 328, 8],
    [41, 329, 3],
    [41, 330, 5],
    [41, 331, 9],
    [41, 332, 1],
    [41, 333, 5],
    [42, 208, 5],
    [42, 209, 2],
    [42, 210, 5],
    [42, 211, 4],
    [42, 212, 1],
    [42, 213, 4],
    [42, 214, 5],
    [42, 215, 10],
    [42, 216, 6],
    [42, 217, 4],
    [42, 218, 1],
    [42, 219, 3],
    [42, 220, 10],
    [42, 221, 6],
    [42, 222, 1],
    [42, 223, 6],
    [42, 224, 2],
    [42, 225, 2],
    [42, 226, 4],
    [42, 227, 8],
    [42, 228, 5],
    [42, 229, 4],
    [42, 230, 7],
    [42, 231, 6],
    [42, 232, 5],
    [42, 233, 5],
    [42, 234, 3],
    [42, 235, 3],
    [42, 236, 6],
    [42, 237, 8],
    [42, 238, 2],
    [42, 239, 2],
    [42, 240, 3],
    [42, 241, 2],
    [42, 242, 5],
    [42, 243, 10],
    [42, 244, 8],
    [42, 245, 6],
    [42, 246, 2],
    [42, 247, 6],
    [42, 248, 7],
    [42, 249, 9],
    [42, 250, 3],
    [42, 251, 2],
    [42, 252, 1],
    [42, 253, 7],
    [42, 254, 8],
    [42, 255, 7],
    [42, 256, 8],
    [42, 257, 1],
    [42, 258, 6],
    [42, 259, 4],
    [42, 260, 3],
    [42, 261, 5],
    [42, 262, 5],
    [42, 263, 10],
    [42, 264, 7],
    [42, 265, 6],
    [42, 266, 3],
    [42, 267, 2],
    [42, 268, 1],
    [42, 269, 2],
    [42, 270, 5],
    [42, 271, 7],
    [42, 272, 7],
    [42, 273, 5],
    [42, 274, 3],
    [42, 275, 10],
    [42, 276, 8],
    [42, 277, 6],
    [42, 278, 3],
    [42, 279, 8],
    [42, 280, 3],
    [42, 281, 6],
    [42, 282, 9],
    [42, 283, 6],
    [42, 284, 3],
    [42, 285, 8],
    [42, 286, 6],
    [42, 287, 9],
    [42, 288, 10],
    [42, 289, 8],
    [42, 290, 3],
    [42, 291, 7],
    [42, 292, 9],
    [42, 293, 8],
    [42, 294, 1],
    [42, 295, 1],
    [42, 296, 4],
    [42, 297, 6],
    [42, 298, 9],
    [42, 299, 8],
    [42, 300, 7],
    [42, 301, 5],
    [42, 302, 7],
    [42, 303, 8],
    [42, 304, 9],
    [42, 305, 7],
    [42, 306, 1],
    [42, 307, 10],
    [42, 308, 8],
    [42, 309, 1],
    [42, 310, 4],
    [42, 311, 9],
    [42, 312, 8],
    [42, 313, 9],
    [42, 314, 9],
    [42, 315, 6],
    [42, 316, 9],
    [42, 317, 8],
    [42, 318, 7],
    [42, 319, 5],
    [42, 320, 1],
    [42, 321, 7],
    [42, 322, 5],
    [42, 323, 5],
    [42, 324, 9],
    [42, 325, 5],
    [42, 326, 10],
    [42, 327, 9],
    [42, 328, 1],
    [42, 329, 7],
    [42, 330, 5],
    [42, 331, 4],
    [42, 332, 4],
    [42, 333, 2],
    [43, 208, 3],
    [43, 209, 7],
    [43, 210, 2],
    [43, 211, 5],
    [43, 212, 9],
    [43, 213, 4],
    [43, 214, 8],
    [43, 215, 1],
    [43, 216, 4],
    [43, 217, 4],
    [43, 218, 1],
    [43, 219, 6],
    [43, 220, 5],
    [43, 221, 10],
    [43, 222, 7],
    [43, 223, 2],
    [43, 224, 9],
    [43, 225, 3],
    [43, 226, 2],
    [43, 227, 1],
    [43, 228, 5],
    [43, 229, 6],
    [43, 230, 3],
    [43, 231, 4],
    [43, 232, 3],
    [43, 233, 10],
    [43, 234, 4],
    [43, 235, 4],
    [43, 236, 1],
    [43, 237, 9],
    [43, 238, 10],
    [43, 239, 10],
    [43, 240, 3],
    [43, 241, 6],
    [43, 242, 8],
    [43, 243, 3],
    [43, 244, 8],
    [43, 245, 1],
    [43, 246, 2],
    [43, 247, 2],
    [43, 248, 9],
    [43, 249, 1],
    [43, 250, 9],
    [43, 251, 10],
    [43, 252, 3],
    [43, 253, 10],
    [43, 254, 5],
    [43, 255, 1],
    [43, 256, 1],
    [43, 257, 3],
    [43, 258, 9],
    [43, 259, 7],
    [43, 260, 1],
    [43, 261, 4],
    [43, 262, 8],
    [43, 263, 3],
    [43, 264, 3],
    [43, 265, 2],
    [43, 266, 4],
    [43, 267, 3],
    [43, 268, 8],
    [43, 269, 2],
    [43, 270, 2],
    [43, 271, 10],
    [43, 272, 2],
    [43, 273, 10],
    [43, 274, 10],
    [43, 275, 10],
    [43, 276, 6],
    [43, 277, 6],
    [43, 278, 7],
    [43, 279, 4],
    [43, 280, 8],
    [43, 281, 1],
    [43, 282, 3],
    [43, 283, 2],
    [43, 284, 8],
    [43, 285, 7],
    [43, 286, 10],
    [43, 287, 7],
    [43, 288, 4],
    [43, 289, 2],
    [43, 290, 4],
    [43, 291, 2],
    [43, 292, 7],
    [43, 293, 6],
    [43, 294, 10],
    [43, 295, 10],
    [43, 296, 7],
    [43, 297, 9],
    [43, 298, 3],
    [43, 299, 10],
    [43, 300, 6],
    [43, 301, 7],
    [43, 302, 10],
    [43, 303, 6],
    [43, 304, 2],
    [43, 305, 5],
    [43, 306, 6],
    [43, 307, 5],
    [43, 308, 3],
    [43, 309, 9],
    [43, 310, 4],
    [43, 311, 8],
    [43, 312, 7],
    [43, 313, 3],
    [43, 314, 10],
    [43, 315, 10],
    [43, 316, 2],
    [43, 317, 1],
    [43, 318, 5],
    [43, 319, 3],
    [43, 320, 2],
    [43, 321, 9],
    [43, 322, 4],
    [43, 323, 5],
    [43, 324, 3],
    [43, 325, 8],
    [43, 326, 1],
    [43, 327, 8],
    [43, 328, 9],
    [43, 329, 6],
    [43, 330, 6],
    [43, 331, 4],
    [43, 332, 10],
    [43, 333, 1],
    [44, 208, 6],
    [44, 209, 8],
    [44, 210, 7],
    [44, 211, 6],
    [44, 212, 5],
    [44, 213, 3],
    [44, 214, 4],
    [44, 215, 5],
    [44, 216, 2],
    [44, 217, 8],
    [44, 218, 6],
    [44, 219, 10],
    [44, 220, 6],
    [44, 221, 3],
    [44, 222, 6],
    [44, 223, 5],
    [44, 224, 8],
    [44, 225, 3],
    [44, 226, 3],
    [44, 227, 1],
    [44, 228, 10],
    [44, 229, 5],
    [44, 230, 6],
    [44, 231, 7],
    [44, 232, 8],
    [44, 233, 9],
    [44, 234, 9],
    [44, 235, 10],
    [44, 236, 1],
    [44, 237, 2],
    [44, 238, 2],
    [44, 239, 3],
    [44, 240, 9],
    [44, 241, 9],
    [44, 242, 9],
    [44, 243, 9],
    [44, 244, 10],
    [44, 245, 5],
    [44, 246, 3],
    [44, 247, 10],
    [44, 248, 2],
    [44, 249, 7],
    [44, 250, 5],
    [44, 251, 4],
    [44, 252, 5],
    [44, 253, 4],
    [44, 254, 6],
    [44, 255, 1],
    [44, 256, 2],
    [44, 257, 2],
    [44, 258, 5],
    [44, 259, 4],
    [44, 260, 2],
    [44, 261, 9],
    [44, 262, 6],
    [44, 263, 1],
    [44, 264, 8],
    [44, 265, 3],
    [44, 266, 2],
    [44, 267, 5],
    [44, 268, 10],
    [44, 269, 3],
    [44, 270, 3],
    [44, 271, 8],
    [44, 272, 10],
    [44, 273, 6],
    [44, 274, 4],
    [44, 275, 7],
    [44, 276, 3],
    [44, 277, 8],
    [44, 278, 7],
    [44, 279, 6],
    [44, 280, 7],
    [44, 281, 8],
    [44, 282, 4],
    [44, 283, 2],
    [44, 284, 8],
    [44, 285, 3],
    [44, 286, 1],
    [44, 287, 5],
    [44, 288, 6],
    [44, 289, 1],
    [44, 290, 10],
    [44, 291, 7],
    [44, 292, 1],
    [44, 293, 2],
    [44, 294, 7],
    [44, 295, 7],
    [44, 296, 6],
    [44, 297, 3],
    [44, 298, 1],
    [44, 299, 8],
    [44, 300, 5],
    [44, 301, 2],
    [44, 302, 1],
    [44, 303, 1],
    [44, 304, 3],
    [44, 305, 9],
    [44, 306, 3],
    [44, 307, 7],
    [44, 308, 2],
    [44, 309, 8],
    [44, 310, 5],
    [44, 311, 7],
    [44, 312, 5],
    [44, 313, 5],
    [44, 314, 7],
    [44, 315, 5],
    [44, 316, 9],
    [44, 317, 3],
    [44, 318, 2],
    [44, 319, 6],
    [44, 320, 8],
    [44, 321, 6],
    [44, 322, 5],
    [44, 323, 3],
    [44, 324, 2],
    [44, 325, 9],
    [44, 326, 9],
    [44, 327, 10],
    [44, 328, 7],
    [44, 329, 7],
    [44, 330, 8],
    [44, 331, 6],
    [44, 332, 4],
    [44, 333, 3],
    [45, 208, 10],
    [45, 209, 2],
    [45, 210, 7],
    [45, 211, 4],
    [45, 212, 7],
    [45, 213, 1],
    [45, 214, 6],
    [45, 215, 9],
    [45, 216, 10],
    [45, 217, 1],
    [45, 218, 9],
    [45, 219, 8],
    [45, 220, 5],
    [45, 221, 7],
    [45, 222, 8],
    [45, 223, 8],
    [45, 224, 7],
    [45, 225, 7],
    [45, 226, 5],
    [45, 227, 4],
    [45, 228, 8],
    [45, 229, 5],
    [45, 230, 5],
    [45, 231, 2],
    [45, 232, 2],
    [45, 233, 3],
    [45, 234, 9],
    [45, 235, 2],
    [45, 236, 6],
    [45, 237, 4],
    [45, 238, 3],
    [45, 239, 7],
    [45, 240, 10],
    [45, 241, 6],
    [45, 242, 3],
    [45, 243, 10],
    [45, 244, 8],
    [45, 245, 7],
    [45, 246, 5],
    [45, 247, 8],
    [45, 248, 5],
    [45, 249, 1],
    [45, 250, 1],
    [45, 251, 9],
    [45, 252, 5],
    [45, 253, 7],
    [45, 254, 10],
    [45, 255, 5],
    [45, 256, 8],
    [45, 257, 1],
    [45, 258, 6],
    [45, 259, 9],
    [45, 260, 1],
    [45, 261, 10],
    [45, 262, 6],
    [45, 263, 4],
    [45, 264, 2],
    [45, 265, 4],
    [45, 266, 1],
    [45, 267, 8],
    [45, 268, 4],
    [45, 269, 8],
    [45, 270, 9],
    [45, 271, 8],
    [45, 272, 6],
    [45, 273, 7],
    [45, 274, 3],
    [45, 275, 5],
    [45, 276, 5],
    [45, 277, 9],
    [45, 278, 9],
    [45, 279, 2],
    [45, 280, 6],
    [45, 281, 6],
    [45, 282, 7],
    [45, 283, 4],
    [45, 284, 7],
    [45, 285, 4],
    [45, 286, 3],
    [45, 287, 4],
    [45, 288, 9],
    [45, 289, 6],
    [45, 290, 1],
    [45, 291, 3],
    [45, 292, 4],
    [45, 293, 1],
    [45, 294, 3],
    [45, 295, 3],
    [45, 296, 1],
    [45, 297, 8],
    [45, 298, 3],
    [45, 299, 2],
    [45, 300, 9],
    [45, 301, 8],
    [45, 302, 8],
    [45, 303, 3],
    [45, 304, 9],
    [45, 305, 5],
    [45, 306, 4],
    [45, 307, 8],
    [45, 308, 3],
    [45, 309, 4],
    [45, 310, 4],
    [45, 311, 7],
    [45, 312, 2],
    [45, 313, 9],
    [45, 314, 1],
    [45, 315, 3],
    [45, 316, 6],
    [45, 317, 10],
    [45, 318, 4],
    [45, 319, 1],
    [45, 320, 4],
    [45, 321, 3],
    [45, 322, 8],
    [45, 323, 7],
    [45, 324, 2],
    [45, 325, 6],
    [45, 326, 2],
    [45, 327, 3],
    [45, 328, 8],
    [45, 329, 6],
    [45, 330, 2],
    [45, 331, 6],
    [45, 332, 9],
    [45, 333, 10],
    [46, 208, 6],
    [46, 209, 1],
    [46, 210, 8],
    [46, 211, 2],
    [46, 212, 9],
    [46, 213, 9],
    [46, 214, 4],
    [46, 215, 3],
    [46, 216, 3],
    [46, 217, 8],
    [46, 218, 8],
    [46, 219, 8],
    [46, 220, 5],
    [46, 221, 7],
    [46, 222, 6],
    [46, 223, 2],
    [46, 224, 2],
    [46, 225, 5],
    [46, 226, 2],
    [46, 227, 2],
    [46, 228, 6],
    [46, 229, 7],
    [46, 230, 3],
    [46, 231, 10],
    [46, 232, 3],
    [46, 233, 5],
    [46, 234, 9],
    [46, 235, 2],
    [46, 236, 9],
    [46, 237, 9],
    [46, 238, 9],
    [46, 239, 1],
    [46, 240, 3],
    [46, 241, 3],
    [46, 242, 5],
    [46, 243, 4],
    [46, 244, 10],
    [46, 245, 5],
    [46, 246, 7],
    [46, 247, 10],
    [46, 248, 2],
    [46, 249, 10],
    [46, 250, 2],
    [46, 251, 4],
    [46, 252, 9],
    [46, 253, 4],
    [46, 254, 2],
    [46, 255, 7],
    [46, 256, 1],
    [46, 257, 7],
    [46, 258, 10],
    [46, 259, 3],
    [46, 260, 6],
    [46, 261, 10],
    [46, 262, 3],
    [46, 263, 5],
    [46, 264, 7],
    [46, 265, 1],
    [46, 266, 10],
    [46, 267, 1],
    [46, 268, 3],
    [46, 269, 5],
    [46, 270, 5],
    [46, 271, 1],
    [46, 272, 2],
    [46, 273, 3],
    [46, 274, 7],
    [46, 275, 2],
    [46, 276, 8],
    [46, 277, 5],
    [46, 278, 7],
    [46, 279, 4],
    [46, 280, 2],
    [46, 281, 6],
    [46, 282, 10],
    [46, 283, 3],
    [46, 284, 6],
    [46, 285, 3],
    [46, 286, 3],
    [46, 287, 3],
    [46, 288, 10],
    [46, 289, 6],
    [46, 290, 6],
    [46, 291, 5],
    [46, 292, 8],
    [46, 293, 9],
    [46, 294, 3],
    [46, 295, 6],
    [46, 296, 4],
    [46, 297, 10],
    [46, 298, 6],
    [46, 299, 4],
    [46, 300, 9],
    [46, 301, 7],
    [46, 302, 9],
    [46, 303, 4],
    [46, 304, 7],
    [46, 305, 8],
    [46, 306, 9],
    [46, 307, 2],
    [46, 308, 9],
    [46, 309, 4],
    [46, 310, 2],
    [46, 311, 4],
    [46, 312, 1],
    [46, 313, 4],
    [46, 314, 7],
    [46, 315, 3],
    [46, 316, 3],
    [46, 317, 3],
    [46, 318, 10],
    [46, 319, 4],
    [46, 320, 5],
    [46, 321, 8],
    [46, 322, 10],
    [46, 323, 10],
    [46, 324, 3],
    [46, 325, 6],
    [46, 326, 4],
    [46, 327, 5],
    [46, 328, 6],
    [46, 329, 6],
    [46, 330, 7],
    [46, 331, 6],
    [46, 332, 10],
    [46, 333, 5],
    [47, 208, 8],
    [47, 209, 1],
    [47, 210, 6],
    [47, 211, 10],
    [47, 212, 1],
    [47, 213, 6],
    [47, 214, 3],
    [47, 215, 7],
    [47, 216, 6],
    [47, 217, 3],
    [47, 218, 6],
    [47, 219, 5],
    [47, 220, 1],
    [47, 221, 8],
    [47, 222, 7],
    [47, 223, 1],
    [47, 224, 7],
    [47, 225, 10],
    [47, 226, 1],
    [47, 227, 2],
    [47, 228, 6],
    [47, 229, 7],
    [47, 230, 5],
    [47, 231, 9],
    [47, 232, 2],
    [47, 233, 6],
    [47, 234, 7],
    [47, 235, 4],
    [47, 236, 6],
    [47, 237, 5],
    [47, 238, 6],
    [47, 239, 10],
    [47, 240, 1],
    [47, 241, 6],
    [47, 242, 4],
    [47, 243, 4],
    [47, 244, 3],
    [47, 245, 8],
    [47, 246, 9],
    [47, 247, 9],
    [47, 248, 8],
    [47, 249, 9],
    [47, 250, 1],
    [47, 251, 9],
    [47, 252, 4],
    [47, 253, 3],
    [47, 254, 2],
    [47, 255, 9],
    [47, 256, 3],
    [47, 257, 4],
    [47, 258, 7],
    [47, 259, 1],
    [47, 260, 9],
    [47, 261, 2],
    [47, 262, 8],
    [47, 263, 4],
    [47, 264, 10],
    [47, 265, 9],
    [47, 266, 4],
    [47, 267, 5],
    [47, 268, 10],
    [47, 269, 4],
    [47, 270, 10],
    [47, 271, 3],
    [47, 272, 2],
    [47, 273, 8],
    [47, 274, 1],
    [47, 275, 8],
    [47, 276, 9],
    [47, 277, 9],
    [47, 278, 10],
    [47, 279, 10],
    [47, 280, 4],
    [47, 281, 2],
    [47, 282, 6],
    [47, 283, 10],
    [47, 284, 7],
    [47, 285, 7],
    [47, 286, 7],
    [47, 287, 3],
    [47, 288, 9],
    [47, 289, 10],
    [47, 290, 4],
    [47, 291, 4],
    [47, 292, 4],
    [47, 293, 3],
    [47, 294, 3],
    [47, 295, 5],
    [47, 296, 9],
    [47, 297, 2],
    [47, 298, 1],
    [47, 299, 9],
    [47, 300, 8],
    [47, 301, 6],
    [47, 302, 5],
    [47, 303, 9],
    [47, 304, 9],
    [47, 305, 2],
    [47, 306, 5],
    [47, 307, 9],
    [47, 308, 7],
    [47, 309, 2],
    [47, 310, 7],
    [47, 311, 8],
    [47, 312, 5],
    [47, 313, 3],
    [47, 314, 4],
    [47, 315, 10],
    [47, 316, 2],
    [47, 317, 6],
    [47, 318, 1],
    [47, 319, 9],
    [47, 320, 4],
    [47, 321, 5],
    [47, 322, 1],
    [47, 323, 8],
    [47, 324, 9],
    [47, 325, 9],
    [47, 326, 10],
    [47, 327, 6],
    [47, 328, 7],
    [47, 329, 7],
    [47, 330, 8],
    [47, 331, 5],
    [47, 332, 4],
    [47, 333, 10],
    [48, 208, 4],
    [48, 209, 6],
    [48, 210, 10],
    [48, 211, 9],
    [48, 212, 6],
    [48, 213, 9],
    [48, 214, 7],
    [48, 215, 7],
    [48, 216, 8],
    [48, 217, 4],
    [48, 218, 9],
    [48, 219, 1],
    [48, 220, 10],
    [48, 221, 4],
    [48, 222, 8],
    [48, 223, 2],
    [48, 224, 8],
    [48, 225, 2],
    [48, 226, 10],
    [48, 227, 10],
    [48, 228, 3],
    [48, 229, 5],
    [48, 230, 2],
    [48, 231, 6],
    [48, 232, 2],
    [48, 233, 10],
    [48, 234, 5],
    [48, 235, 2],
    [48, 236, 2],
    [48, 237, 7],
    [48, 238, 2],
    [48, 239, 6],
    [48, 240, 8],
    [48, 241, 1],
    [48, 242, 9],
    [48, 243, 3],
    [48, 244, 10],
    [48, 245, 8],
    [48, 246, 1],
    [48, 247, 10],
    [48, 248, 10],
    [48, 249, 7],
    [48, 250, 9],
    [48, 251, 10],
    [48, 252, 10],
    [48, 253, 7],
    [48, 254, 7],
    [48, 255, 3],
    [48, 256, 7],
    [48, 257, 6],
    [48, 258, 7],
    [48, 259, 7],
    [48, 260, 6],
    [48, 261, 5],
    [48, 262, 6],
    [48, 263, 5],
    [48, 264, 5],
    [48, 265, 4],
    [48, 266, 6],
    [48, 267, 1],
    [48, 268, 9],
    [48, 269, 10],
    [48, 270, 10],
    [48, 271, 5],
    [48, 272, 10],
    [48, 273, 4],
    [48, 274, 9],
    [48, 275, 8],
    [48, 276, 7],
    [48, 277, 8],
    [48, 278, 3],
    [48, 279, 4],
    [48, 280, 5],
    [48, 281, 3],
    [48, 282, 4],
    [48, 283, 7],
    [48, 284, 7],
    [48, 285, 9],
    [48, 286, 5],
    [48, 287, 6],
    [48, 288, 2],
    [48, 289, 10],
    [48, 290, 4],
    [48, 291, 9],
    [48, 292, 2],
    [48, 293, 2],
    [48, 294, 1],
    [48, 295, 9],
    [48, 296, 3],
    [48, 297, 2],
    [48, 298, 5],
    [48, 299, 10],
    [48, 300, 9],
    [48, 301, 3],
    [48, 302, 9],
    [48, 303, 9],
    [48, 304, 1],
    [48, 305, 6],
    [48, 306, 5],
    [48, 307, 5],
    [48, 308, 3],
    [48, 309, 2],
    [48, 310, 4],
    [48, 311, 5],
    [48, 312, 9],
    [48, 313, 9],
    [48, 314, 3],
    [48, 315, 3],
    [48, 316, 9],
    [48, 317, 2],
    [48, 318, 4],
    [48, 319, 6],
    [48, 320, 9],
    [48, 321, 6],
    [48, 322, 2],
    [48, 323, 4],
    [48, 324, 4],
    [48, 325, 8],
    [48, 326, 9],
    [48, 327, 7],
    [48, 328, 6],
    [48, 329, 4],
    [48, 330, 3],
    [48, 331, 3],
    [48, 332, 3],
    [48, 333, 6],
    [49, 208, 3],
    [49, 209, 10],
    [49, 210, 3],
    [49, 211, 3],
    [49, 212, 7],
    [49, 213, 8],
    [49, 214, 5],
    [49, 215, 9],
    [49, 216, 7],
    [49, 217, 2],
    [49, 218, 4],
    [49, 219, 7],
    [49, 220, 10],
    [49, 221, 3],
    [49, 222, 8],
    [49, 223, 2],
    [49, 224, 1],
    [49, 225, 3],
    [49, 226, 10],
    [49, 227, 3],
    [49, 228, 4],
    [49, 229, 5],
    [49, 230, 5],
    [49, 231, 1],
    [49, 232, 9],
    [49, 233, 9],
    [49, 234, 2],
    [49, 235, 2],
    [49, 236, 5],
    [49, 237, 8],
    [49, 238, 9],
    [49, 239, 1],
    [49, 240, 10],
    [49, 241, 8],
    [49, 242, 3],
    [49, 243, 1],
    [49, 244, 4],
    [49, 245, 8],
    [49, 246, 5],
    [49, 247, 10],
    [49, 248, 10],
    [49, 249, 4],
    [49, 250, 8],
    [49, 251, 4],
    [49, 252, 4],
    [49, 253, 9],
    [49, 254, 10],
    [49, 255, 4],
    [49, 256, 5],
    [49, 257, 1],
    [49, 258, 8],
    [49, 259, 4],
    [49, 260, 1],
    [49, 261, 5],
    [49, 262, 3],
    [49, 263, 7],
    [49, 264, 7],
    [49, 265, 1],
    [49, 266, 4],
    [49, 267, 10],
    [49, 268, 7],
    [49, 269, 6],
    [49, 270, 9],
    [49, 271, 1],
    [49, 272, 5],
    [49, 273, 7],
    [49, 274, 3],
    [49, 275, 6],
    [49, 276, 10],
    [49, 277, 7],
    [49, 278, 6],
    [49, 279, 1],
    [49, 280, 3],
    [49, 281, 5],
    [49, 282, 4],
    [49, 283, 10],
    [49, 284, 2],
    [49, 285, 4],
    [49, 286, 2],
    [49, 287, 3],
    [49, 288, 7],
    [49, 289, 3],
    [49, 290, 8],
    [49, 291, 9],
    [49, 292, 8],
    [49, 293, 2],
    [49, 294, 5],
    [49, 295, 7],
    [49, 296, 2],
    [49, 297, 8],
    [49, 298, 4],
    [49, 299, 6],
    [49, 300, 4],
    [49, 301, 4],
    [49, 302, 7],
    [49, 303, 9],
    [49, 304, 1],
    [49, 305, 4],
    [49, 306, 6],
    [49, 307, 9],
    [49, 308, 8],
    [49, 309, 7],
    [49, 310, 10],
    [49, 311, 1],
    [49, 312, 7],
    [49, 313, 6],
    [49, 314, 6],
    [49, 315, 7],
    [49, 316, 3],
    [49, 317, 2],
    [49, 318, 3],
    [49, 319, 3],
    [49, 320, 4],
    [49, 321, 1],
    [49, 322, 3],
    [49, 323, 5],
    [49, 324, 7],
    [49, 325, 10],
    [49, 326, 5],
    [49, 327, 5],
    [49, 328, 3],
    [49, 329, 8],
    [49, 330, 8],
    [49, 331, 7],
    [49, 332, 6],
    [49, 333, 6],
    [50, 208, 6],
    [50, 209, 10],
    [50, 210, 9],
    [50, 211, 1],
    [50, 212, 4],
    [50, 213, 1],
    [50, 214, 10],
    [50, 215, 1],
    [50, 216, 8],
    [50, 217, 3],
    [50, 218, 7],
    [50, 219, 8],
    [50, 220, 8],
    [50, 221, 3],
    [50, 222, 6],
    [50, 223, 4],
    [50, 224, 9],
    [50, 225, 2],
    [50, 226, 4],
    [50, 227, 2],
    [50, 228, 10],
    [50, 229, 9],
    [50, 230, 4],
    [50, 231, 10],
    [50, 232, 6],
    [50, 233, 4],
    [50, 234, 3],
    [50, 235, 3],
    [50, 236, 4],
    [50, 237, 4],
    [50, 238, 2],
    [50, 239, 4],
    [50, 240, 4],
    [50, 241, 7],
    [50, 242, 4],
    [50, 243, 2],
    [50, 244, 4],
    [50, 245, 7],
    [50, 246, 6],
    [50, 247, 3],
    [50, 248, 10],
    [50, 249, 5],
    [50, 250, 5],
    [50, 251, 8],
    [50, 252, 3],
    [50, 253, 1],
    [50, 254, 9],
    [50, 255, 2],
    [50, 256, 4],
    [50, 257, 1],
    [50, 258, 4],
    [50, 259, 2],
    [50, 260, 4],
    [50, 261, 3],
    [50, 262, 6],
    [50, 263, 3],
    [50, 264, 3],
    [50, 265, 4],
    [50, 266, 5],
    [50, 267, 5],
    [50, 268, 1],
    [50, 269, 4],
    [50, 270, 6],
    [50, 271, 4],
    [50, 272, 10],
    [50, 273, 10],
    [50, 274, 7],
    [50, 275, 2],
    [50, 276, 9],
    [50, 277, 7],
    [50, 278, 2],
    [50, 279, 4],
    [50, 280, 10],
    [50, 281, 8],
    [50, 282, 4],
    [50, 283, 2],
    [50, 284, 7],
    [50, 285, 7],
    [50, 286, 1],
    [50, 287, 4],
    [50, 288, 3],
    [50, 289, 4],
    [50, 290, 9],
    [50, 291, 3],
    [50, 292, 5],
    [50, 293, 2],
    [50, 294, 1],
    [50, 295, 3],
    [50, 296, 2],
    [50, 297, 6],
    [50, 298, 7],
    [50, 299, 9],
    [50, 300, 9],
    [50, 301, 2],
    [50, 302, 1],
    [50, 303, 1],
    [50, 304, 3],
    [50, 305, 2],
    [50, 306, 6],
    [50, 307, 2],
    [50, 308, 1],
    [50, 309, 1],
    [50, 310, 8],
    [50, 311, 10],
    [50, 312, 3],
    [50, 313, 6],
    [50, 314, 2],
    [50, 315, 4],
    [50, 316, 5],
    [50, 317, 1],
    [50, 318, 7],
    [50, 319, 2],
    [50, 320, 9],
    [50, 321, 8],
    [50, 322, 6],
    [50, 323, 4],
    [50, 324, 8],
    [50, 325, 8],
    [50, 326, 4],
    [50, 327, 8],
    [50, 328, 5],
    [50, 329, 9],
    [50, 330, 4],
    [50, 331, 7],
    [50, 332, 10],
    [50, 333, 3],
    [51, 208, 6],
    [51, 209, 6],
    [51, 210, 1],
    [51, 211, 5],
    [51, 212, 7],
    [51, 213, 3],
    [51, 214, 4],
    [51, 215, 7],
    [51, 216, 2],
    [51, 217, 7],
    [51, 218, 5],
    [51, 219, 1],
    [51, 220, 1],
    [51, 221, 8],
    [51, 222, 10],
    [51, 223, 6],
    [51, 224, 2],
    [51, 225, 10],
    [51, 226, 6],
    [51, 227, 5],
    [51, 228, 8],
    [51, 229, 8],
    [51, 230, 6],
    [51, 231, 9],
    [51, 232, 1],
    [51, 233, 2],
    [51, 234, 7],
    [51, 235, 7],
    [51, 236, 5],
    [51, 237, 6],
    [51, 238, 5],
    [51, 239, 3],
    [51, 240, 9],
    [51, 241, 9],
    [51, 242, 4],
    [51, 243, 6],
    [51, 244, 9],
    [51, 245, 7],
    [51, 246, 1],
    [51, 247, 10],
    [51, 248, 6],
    [51, 249, 1],
    [51, 250, 6],
    [51, 251, 6],
    [51, 252, 9],
    [51, 253, 7],
    [51, 254, 4],
    [51, 255, 8],
    [51, 256, 4],
    [51, 257, 7],
    [51, 258, 2],
    [51, 259, 8],
    [51, 260, 7],
    [51, 261, 2],
    [51, 262, 7],
    [51, 263, 3],
    [51, 264, 10],
    [51, 265, 5],
    [51, 266, 1],
    [51, 267, 6],
    [51, 268, 1],
    [51, 269, 3],
    [51, 270, 2],
    [51, 271, 6],
    [51, 272, 9],
    [51, 273, 5],
    [51, 274, 8],
    [51, 275, 8],
    [51, 276, 4],
    [51, 277, 2],
    [51, 278, 5],
    [51, 279, 7],
    [51, 280, 3],
    [51, 281, 10],
    [51, 282, 3],
    [51, 283, 5],
    [51, 284, 2],
    [51, 285, 2],
    [51, 286, 8],
    [51, 287, 10],
    [51, 288, 2],
    [51, 289, 1],
    [51, 290, 10],
    [51, 291, 5],
    [51, 292, 8],
    [51, 293, 4],
    [51, 294, 6],
    [51, 295, 9],
    [51, 296, 4],
    [51, 297, 9],
    [51, 298, 10],
    [51, 299, 5],
    [51, 300, 7],
    [51, 301, 4],
    [51, 302, 7],
    [51, 303, 8],
    [51, 304, 3],
    [51, 305, 9],
    [51, 306, 5],
    [51, 307, 6],
    [51, 308, 9],
    [51, 309, 6],
    [51, 310, 1],
    [51, 311, 2],
    [51, 312, 8],
    [51, 313, 3],
    [51, 314, 6],
    [51, 315, 10],
    [51, 316, 9],
    [51, 317, 10],
    [51, 318, 5],
    [51, 319, 6],
    [51, 320, 4],
    [51, 321, 10],
    [51, 322, 5],
    [51, 323, 6],
    [51, 324, 3],
    [51, 325, 1],
    [51, 326, 2],
    [51, 327, 5],
    [51, 328, 9],
    [51, 329, 3],
    [51, 330, 10],
    [51, 331, 6],
    [51, 332, 5],
    [51, 333, 4],
    [52, 208, 2],
    [52, 209, 8],
    [52, 210, 8],
    [52, 211, 6],
    [52, 212, 10],
    [52, 213, 10],
    [52, 214, 10],
    [52, 215, 9],
    [52, 216, 3],
    [52, 217, 3],
    [52, 218, 4],
    [52, 219, 2],
    [52, 220, 8],
    [52, 221, 2],
    [52, 222, 6],
    [52, 223, 6],
    [52, 224, 6],
    [52, 225, 4],
    [52, 226, 6],
    [52, 227, 6],
    [52, 228, 6],
    [52, 229, 8],
    [52, 230, 10],
    [52, 231, 7],
    [52, 232, 1],
    [52, 233, 10],
    [52, 234, 6],
    [52, 235, 1],
    [52, 236, 5],
    [52, 237, 8],
    [52, 238, 10],
    [52, 239, 6],
    [52, 240, 6],
    [52, 241, 3],
    [52, 242, 2],
    [52, 243, 5],
    [52, 244, 10],
    [52, 245, 1],
    [52, 246, 9],
    [52, 247, 6],
    [52, 248, 9],
    [52, 249, 8],
    [52, 250, 3],
    [52, 251, 2],
    [52, 252, 10],
    [52, 253, 4],
    [52, 254, 2],
    [52, 255, 6],
    [52, 256, 10],
    [52, 257, 3],
    [52, 258, 3],
    [52, 259, 9],
    [52, 260, 9],
    [52, 261, 5],
    [52, 262, 10],
    [52, 263, 10],
    [52, 264, 6],
    [52, 265, 4],
    [52, 266, 2],
    [52, 267, 1],
    [52, 268, 5],
    [52, 269, 7],
    [52, 270, 4],
    [52, 271, 9],
    [52, 272, 5],
    [52, 273, 8],
    [52, 274, 3],
    [52, 275, 8],
    [52, 276, 5],
    [52, 277, 9],
    [52, 278, 6],
    [52, 279, 10],
    [52, 280, 4],
    [52, 281, 5],
    [52, 282, 5],
    [52, 283, 5],
    [52, 284, 10],
    [52, 285, 7],
    [52, 286, 7],
    [52, 287, 3],
    [52, 288, 2],
    [52, 289, 7],
    [52, 290, 4],
    [52, 291, 9],
    [52, 292, 2],
    [52, 293, 10],
    [52, 294, 1],
    [52, 295, 3],
    [52, 296, 4],
    [52, 297, 8],
    [52, 298, 7],
    [52, 299, 9],
    [52, 300, 8],
    [52, 301, 2],
    [52, 302, 10],
    [52, 303, 9],
    [52, 304, 9],
    [52, 305, 2],
    [52, 306, 1],
    [52, 307, 4],
    [52, 308, 3],
    [52, 309, 4],
    [52, 310, 2],
    [52, 311, 3],
    [52, 312, 4],
    [52, 313, 9],
    [52, 314, 4],
    [52, 315, 7],
    [52, 316, 6],
    [52, 317, 3],
    [52, 318, 8],
    [52, 319, 7],
    [52, 320, 7],
    [52, 321, 9],
    [52, 322, 5],
    [52, 323, 7],
    [52, 324, 3],
    [52, 325, 10],
    [52, 326, 2],
    [52, 327, 2],
    [52, 328, 3],
    [52, 329, 6],
    [52, 330, 2],
    [52, 331, 1],
    [52, 332, 9],
    [52, 333, 5],
    [53, 208, 8],
    [53, 209, 10],
    [53, 210, 3],
    [53, 211, 6],
    [53, 212, 4],
    [53, 213, 1],
    [53, 214, 4],
    [53, 215, 7],
    [53, 216, 1],
    [53, 217, 10],
    [53, 218, 5],
    [53, 219, 9],
    [53, 220, 4],
    [53, 221, 8],
    [53, 222, 1],
    [53, 223, 7],
    [53, 224, 4],
    [53, 225, 5],
    [53, 226, 3],
    [53, 227, 7],
    [53, 228, 3],
    [53, 229, 1],
    [53, 230, 6],
    [53, 231, 3],
    [53, 232, 6],
    [53, 233, 2],
    [53, 234, 4],
    [53, 235, 8],
    [53, 236, 10],
    [53, 237, 2],
    [53, 238, 2],
    [53, 239, 2],
    [53, 240, 5],
    [53, 241, 1],
    [53, 242, 9],
    [53, 243, 4],
    [53, 244, 3],
    [53, 245, 3],
    [53, 246, 4],
    [53, 247, 4],
    [53, 248, 2],
    [53, 249, 9],
    [53, 250, 9],
    [53, 251, 3],
    [53, 252, 8],
    [53, 253, 9],
    [53, 254, 7],
    [53, 255, 5],
    [53, 256, 4],
    [53, 257, 10],
    [53, 258, 8],
    [53, 259, 6],
    [53, 260, 1],
    [53, 261, 3],
    [53, 262, 5],
    [53, 263, 10],
    [53, 264, 5],
    [53, 265, 6],
    [53, 266, 5],
    [53, 267, 7],
    [53, 268, 1],
    [53, 269, 3],
    [53, 270, 2],
    [53, 271, 5],
    [53, 272, 8],
    [53, 273, 1],
    [53, 274, 3],
    [53, 275, 5],
    [53, 276, 2],
    [53, 277, 2],
    [53, 278, 10],
    [53, 279, 5],
    [53, 280, 1],
    [53, 281, 1],
    [53, 282, 2],
    [53, 283, 2],
    [53, 284, 4],
    [53, 285, 2],
    [53, 286, 2],
    [53, 287, 10],
    [53, 288, 4],
    [53, 289, 10],
    [53, 290, 3],
    [53, 291, 6],
    [53, 292, 8],
    [53, 293, 10],
    [53, 294, 2],
    [53, 295, 3],
    [53, 296, 4],
    [53, 297, 10],
    [53, 298, 10],
    [53, 299, 7],
    [53, 300, 10],
    [53, 301, 10],
    [53, 302, 8],
    [53, 303, 5],
    [53, 304, 1],
    [53, 305, 10],
    [53, 306, 2],
    [53, 307, 8],
    [53, 308, 7],
    [53, 309, 7],
    [53, 310, 10],
    [53, 311, 5],
    [53, 312, 8],
    [53, 313, 10],
    [53, 314, 1],
    [53, 315, 2],
    [53, 316, 3],
    [53, 317, 1],
    [53, 318, 8],
    [53, 319, 10],
    [53, 320, 7],
    [53, 321, 1],
    [53, 322, 6],
    [53, 323, 7],
    [53, 324, 2],
    [53, 325, 8],
    [53, 326, 8],
    [53, 327, 4],
    [53, 328, 10],
    [53, 329, 7],
    [53, 330, 6],
    [53, 331, 7],
    [53, 332, 3],
    [53, 333, 3],
    [54, 208, 6],
    [54, 209, 9],
    [54, 210, 2],
    [54, 211, 8],
    [54, 212, 3],
    [54, 213, 9],
    [54, 214, 3],
    [54, 215, 10],
    [54, 216, 4],
    [54, 217, 10],
    [54, 218, 6],
    [54, 219, 10],
    [54, 220, 8],
    [54, 221, 1],
    [54, 222, 5],
    [54, 223, 9],
    [54, 224, 2],
    [54, 225, 9],
    [54, 226, 7],
    [54, 227, 7],
    [54, 228, 3],
    [54, 229, 7],
    [54, 230, 7],
    [54, 231, 6],
    [54, 232, 2],
    [54, 233, 6],
    [54, 234, 9],
    [54, 235, 1],
    [54, 236, 1],
    [54, 237, 6],
    [54, 238, 3],
    [54, 239, 1],
    [54, 240, 10],
    [54, 241, 2],
    [54, 242, 6],
    [54, 243, 5],
    [54, 244, 3],
    [54, 245, 8],
    [54, 246, 3],
    [54, 247, 1],
    [54, 248, 7],
    [54, 249, 1],
    [54, 250, 6],
    [54, 251, 5],
    [54, 252, 9],
    [54, 253, 8],
    [54, 254, 10],
    [54, 255, 9],
    [54, 256, 5],
    [54, 257, 2],
    [54, 258, 3],
    [54, 259, 7],
    [54, 260, 1],
    [54, 261, 9],
    [54, 262, 4],
    [54, 263, 1],
    [54, 264, 2],
    [54, 265, 3],
    [54, 266, 9],
    [54, 267, 4],
    [54, 268, 10],
    [54, 269, 6],
    [54, 270, 7],
    [54, 271, 6],
    [54, 272, 4],
    [54, 273, 1],
    [54, 274, 6],
    [54, 275, 9],
    [54, 276, 6],
    [54, 277, 1],
    [54, 278, 5],
    [54, 279, 10],
    [54, 280, 8],
    [54, 281, 2],
    [54, 282, 3],
    [54, 283, 6],
    [54, 284, 5],
    [54, 285, 2],
    [54, 286, 6],
    [54, 287, 5],
    [54, 288, 5],
    [54, 289, 5],
    [54, 290, 8],
    [54, 291, 9],
    [54, 292, 4],
    [54, 293, 5],
    [54, 294, 7],
    [54, 295, 2],
    [54, 296, 5],
    [54, 297, 9],
    [54, 298, 5],
    [54, 299, 4],
    [54, 300, 6],
    [54, 301, 8],
    [54, 302, 8],
    [54, 303, 8],
    [54, 304, 9],
    [54, 305, 5],
    [54, 306, 2],
    [54, 307, 2],
    [54, 308, 9],
    [54, 309, 7],
    [54, 310, 3],
    [54, 311, 6],
    [54, 312, 6],
    [54, 313, 4],
    [54, 314, 10],
    [54, 315, 4],
    [54, 316, 5],
    [54, 317, 3],
    [54, 318, 4],
    [54, 319, 3],
    [54, 320, 9],
    [54, 321, 6],
    [54, 322, 4],
    [54, 323, 10],
    [54, 324, 8],
    [54, 325, 5],
    [54, 326, 6],
    [54, 327, 6],
    [54, 328, 4],
    [54, 329, 10],
    [54, 330, 9],
    [54, 331, 5],
    [54, 332, 2],
    [54, 333, 2],
    [55, 208, 9],
    [55, 209, 5],
    [55, 210, 8],
    [55, 211, 8],
    [55, 212, 7],
    [55, 213, 8],
    [55, 214, 6],
    [55, 215, 5],
    [55, 216, 5],
    [55, 217, 5],
    [55, 218, 4],
    [55, 219, 8],
    [55, 220, 7],
    [55, 221, 6],
    [55, 222, 2],
    [55, 223, 5],
    [55, 224, 3],
    [55, 225, 7],
    [55, 226, 4],
    [55, 227, 10],
    [55, 228, 8],
    [55, 229, 5],
    [55, 230, 9],
    [55, 231, 8],
    [55, 232, 9],
    [55, 233, 7],
    [55, 234, 1],
    [55, 235, 8],
    [55, 236, 9],
    [55, 237, 7],
    [55, 238, 9],
    [55, 239, 2],
    [55, 240, 4],
    [55, 241, 1],
    [55, 242, 6],
    [55, 243, 2],
    [55, 244, 9],
    [55, 245, 3],
    [55, 246, 6],
    [55, 247, 2],
    [55, 248, 7],
    [55, 249, 4],
    [55, 250, 4],
    [55, 251, 3],
    [55, 252, 2],
    [55, 253, 8],
    [55, 254, 1],
    [55, 255, 5],
    [55, 256, 7],
    [55, 257, 5],
    [55, 258, 8],
    [55, 259, 9],
    [55, 260, 6],
    [55, 261, 7],
    [55, 262, 2],
    [55, 263, 3],
    [55, 264, 8],
    [55, 265, 8],
    [55, 266, 9],
    [55, 267, 5],
    [55, 268, 1],
    [55, 269, 5],
    [55, 270, 8],
    [55, 271, 9],
    [55, 272, 9],
    [55, 273, 3],
    [55, 274, 4],
    [55, 275, 4],
    [55, 276, 6],
    [55, 277, 8],
    [55, 278, 5],
    [55, 279, 1],
    [55, 280, 6],
    [55, 281, 10],
    [55, 282, 10],
    [55, 283, 2],
    [55, 284, 3],
    [55, 285, 8],
    [55, 286, 3],
    [55, 287, 10],
    [55, 288, 4],
    [55, 289, 6],
    [55, 290, 2],
    [55, 291, 3],
    [55, 292, 4],
    [55, 293, 2],
    [55, 294, 1],
    [55, 295, 4],
    [55, 296, 5],
    [55, 297, 3],
    [55, 298, 8],
    [55, 299, 4],
    [55, 300, 9],
    [55, 301, 6],
    [55, 302, 2],
    [55, 303, 9],
    [55, 304, 5],
    [55, 305, 8],
    [55, 306, 7],
    [55, 307, 2],
    [55, 308, 8],
    [55, 309, 4],
    [55, 310, 3],
    [55, 311, 8],
    [55, 312, 5],
    [55, 313, 2],
    [55, 314, 8],
    [55, 315, 8],
    [55, 316, 5],
    [55, 317, 4],
    [55, 318, 1],
    [55, 319, 4],
    [55, 320, 1],
    [55, 321, 2],
    [55, 322, 2],
    [55, 323, 7],
    [55, 324, 4],
    [55, 325, 10],
    [55, 326, 7],
    [55, 327, 4],
    [55, 328, 1],
    [55, 329, 10],
    [55, 330, 10],
    [55, 331, 2],
    [55, 332, 7],
    [55, 333, 8],
    [56, 208, 5],
    [56, 209, 5],
    [56, 210, 1],
    [56, 211, 1],
    [56, 212, 6],
    [56, 213, 7],
    [56, 214, 10],
    [56, 215, 4],
    [56, 216, 5],
    [56, 217, 3],
    [56, 218, 7],
    [56, 219, 10],
    [56, 220, 8],
    [56, 221, 7],
    [56, 222, 8],
    [56, 223, 4],
    [56, 224, 3],
    [56, 225, 4],
    [56, 226, 1],
    [56, 227, 7],
    [56, 228, 10],
    [56, 229, 1],
    [56, 230, 5],
    [56, 231, 5],
    [56, 232, 6],
    [56, 233, 8],
    [56, 234, 7],
    [56, 235, 7],
    [56, 236, 2],
    [56, 237, 10],
    [56, 238, 2],
    [56, 239, 7],
    [56, 240, 3],
    [56, 241, 10],
    [56, 242, 5],
    [56, 243, 9],
    [56, 244, 4],
    [56, 245, 3],
    [56, 246, 6],
    [56, 247, 5],
    [56, 248, 5],
    [56, 249, 2],
    [56, 250, 2],
    [56, 251, 3],
    [56, 252, 8],
    [56, 253, 7],
    [56, 254, 7],
    [56, 255, 6],
    [56, 256, 5],
    [56, 257, 9],
    [56, 258, 9],
    [56, 259, 4],
    [56, 260, 7],
    [56, 261, 8],
    [56, 262, 6],
    [56, 263, 8],
    [56, 264, 7],
    [56, 265, 3],
    [56, 266, 10],
    [56, 267, 8],
    [56, 268, 5],
    [56, 269, 4],
    [56, 270, 7],
    [56, 271, 3],
    [56, 272, 3],
    [56, 273, 1],
    [56, 274, 7],
    [56, 275, 1],
    [56, 276, 5],
    [56, 277, 10],
    [56, 278, 7],
    [56, 279, 1],
    [56, 280, 9],
    [56, 281, 2],
    [56, 282, 7],
    [56, 283, 6],
    [56, 284, 2],
    [56, 285, 2],
    [56, 286, 9],
    [56, 287, 4],
    [56, 288, 9],
    [56, 289, 1],
    [56, 290, 6],
    [56, 291, 9],
    [56, 292, 7],
    [56, 293, 8],
    [56, 294, 6],
    [56, 295, 2],
    [56, 296, 7],
    [56, 297, 3],
    [56, 298, 6],
    [56, 299, 6],
    [56, 300, 2],
    [56, 301, 8],
    [56, 302, 5],
    [56, 303, 2],
    [56, 304, 8],
    [56, 305, 6],
    [56, 306, 2],
    [56, 307, 9],
    [56, 308, 7],
    [56, 309, 3],
    [56, 310, 1],
    [56, 311, 3],
    [56, 312, 1],
    [56, 313, 5],
    [56, 314, 1],
    [56, 315, 9],
    [56, 316, 5],
    [56, 317, 8],
    [56, 318, 3],
    [56, 319, 8],
    [56, 320, 9],
    [56, 321, 2],
    [56, 322, 7],
    [56, 323, 4],
    [56, 324, 5],
    [56, 325, 10],
    [56, 326, 1],
    [56, 327, 2],
    [56, 328, 7],
    [56, 329, 2],
    [56, 330, 4],
    [56, 331, 2],
    [56, 332, 9],
    [56, 333, 7],
    [57, 208, 2],
    [57, 209, 4],
    [57, 210, 8],
    [57, 211, 8],
    [57, 212, 6],
    [57, 213, 5],
    [57, 214, 2],
    [57, 215, 4],
    [57, 216, 8],
    [57, 217, 5],
    [57, 218, 4],
    [57, 219, 9],
    [57, 220, 4],
    [57, 221, 7],
    [57, 222, 10],
    [57, 223, 10],
    [57, 224, 7],
    [57, 225, 2],
    [57, 226, 2],
    [57, 227, 1],
    [57, 228, 8],
    [57, 229, 9],
    [57, 230, 3],
    [57, 231, 2],
    [57, 232, 6],
    [57, 233, 5],
    [57, 234, 9],
    [57, 235, 3],
    [57, 236, 10],
    [57, 237, 1],
    [57, 238, 4],
    [57, 239, 6],
    [57, 240, 1],
    [57, 241, 8],
    [57, 242, 7],
    [57, 243, 6],
    [57, 244, 7],
    [57, 245, 7],
    [57, 246, 4],
    [57, 247, 5],
    [57, 248, 5],
    [57, 249, 6],
    [57, 250, 5],
    [57, 251, 7],
    [57, 252, 8],
    [57, 253, 6],
    [57, 254, 1],
    [57, 255, 8],
    [57, 256, 4],
    [57, 257, 9],
    [57, 258, 9],
    [57, 259, 5],
    [57, 260, 5],
    [57, 261, 2],
    [57, 262, 6],
    [57, 263, 2],
    [57, 264, 9],
    [57, 265, 4],
    [57, 266, 10],
    [57, 267, 8],
    [57, 268, 9],
    [57, 269, 10],
    [57, 270, 10],
    [57, 271, 7],
    [57, 272, 1],
    [57, 273, 5],
    [57, 274, 7],
    [57, 275, 6],
    [57, 276, 7],
    [57, 277, 5],
    [57, 278, 2],
    [57, 279, 10],
    [57, 280, 8],
    [57, 281, 3],
    [57, 282, 10],
    [57, 283, 6],
    [57, 284, 5],
    [57, 285, 1],
    [57, 286, 7],
    [57, 287, 3],
    [57, 288, 5],
    [57, 289, 2],
    [57, 290, 9],
    [57, 291, 9],
    [57, 292, 3],
    [57, 293, 7],
    [57, 294, 4],
    [57, 295, 3],
    [57, 296, 5],
    [57, 297, 10],
    [57, 298, 2],
    [57, 299, 5],
    [57, 300, 3],
    [57, 301, 7],
    [57, 302, 3],
    [57, 303, 3],
    [57, 304, 9],
    [57, 305, 3],
    [57, 306, 3],
    [57, 307, 3],
    [57, 308, 1],
    [57, 309, 9],
    [57, 310, 2],
    [57, 311, 5],
    [57, 312, 4],
    [57, 313, 7],
    [57, 314, 4],
    [57, 315, 8],
    [57, 316, 7],
    [57, 317, 2],
    [57, 318, 10],
    [57, 319, 4],
    [57, 320, 7],
    [57, 321, 10],
    [57, 322, 5],
    [57, 323, 7],
    [57, 324, 9],
    [57, 325, 4],
    [57, 326, 10],
    [57, 327, 9],
    [57, 328, 1],
    [57, 329, 8],
    [57, 330, 3],
    [57, 331, 9],
    [57, 332, 7],
    [57, 333, 5],
    [59, 208, 4],
    [59, 209, 8],
    [59, 210, 1],
    [59, 211, 10],
    [59, 212, 3],
    [59, 213, 6],
    [59, 214, 5],
    [59, 215, 6],
    [59, 216, 8],
    [59, 217, 10],
    [59, 218, 2],
    [59, 219, 1],
    [59, 220, 8],
    [59, 221, 5],
    [59, 222, 4],
    [59, 223, 2],
    [59, 224, 9],
    [59, 225, 4],
    [59, 226, 10],
    [59, 227, 3],
    [59, 228, 8],
    [59, 229, 2],
    [59, 230, 9],
    [59, 231, 1],
    [59, 232, 3],
    [59, 233, 2],
    [59, 234, 5],
    [59, 235, 6],
    [59, 236, 1],
    [59, 237, 5],
    [59, 238, 4],
    [59, 239, 3],
    [59, 240, 8],
    [59, 241, 6],
    [59, 242, 6],
    [59, 243, 10],
    [59, 244, 1],
    [59, 245, 1],
    [59, 246, 7],
    [59, 247, 1],
    [59, 248, 9],
    [59, 249, 2],
    [59, 250, 4],
    [59, 251, 2],
    [59, 252, 7],
    [59, 253, 1],
    [59, 254, 4],
    [59, 255, 10],
    [59, 256, 3],
    [59, 257, 7],
    [59, 258, 5],
    [59, 259, 3],
    [59, 260, 8],
    [59, 261, 9],
    [59, 262, 7],
    [59, 263, 8],
    [59, 264, 8],
    [59, 265, 9],
    [59, 266, 6],
    [59, 267, 7],
    [59, 268, 1],
    [59, 269, 10],
    [59, 270, 10],
    [59, 271, 1],
    [59, 272, 2],
    [59, 273, 1],
    [59, 274, 10],
    [59, 275, 1],
    [59, 276, 6],
    [59, 277, 7],
    [59, 278, 4],
    [59, 279, 2],
    [59, 280, 3],
    [59, 281, 1],
    [59, 282, 1],
    [59, 283, 7],
    [59, 284, 4],
    [59, 285, 3],
    [59, 286, 10],
    [59, 287, 4],
    [59, 288, 1],
    [59, 289, 6],
    [59, 290, 5],
    [59, 291, 3],
    [59, 292, 9],
    [59, 293, 8],
    [59, 294, 5],
    [59, 295, 6],
    [59, 296, 1],
    [59, 297, 5],
    [59, 298, 10],
    [59, 299, 7],
    [59, 300, 6],
    [59, 301, 4],
    [59, 302, 5],
    [59, 303, 2],
    [59, 304, 10],
    [59, 305, 2],
    [59, 306, 7],
    [59, 307, 4],
    [59, 308, 5],
    [59, 309, 10],
    [59, 310, 2],
    [59, 311, 10],
    [59, 312, 1],
    [59, 313, 1],
    [59, 314, 4],
    [59, 315, 9],
    [59, 316, 5],
    [59, 317, 5],
    [59, 318, 4],
    [59, 319, 9],
    [59, 320, 1],
    [59, 321, 6],
    [59, 322, 3],
    [59, 323, 3],
    [59, 324, 1],
    [59, 325, 4],
    [59, 326, 2],
    [59, 327, 3],
    [59, 328, 8],
    [59, 329, 9],
    [59, 330, 10],
    [59, 331, 10],
    [59, 332, 7],
    [59, 333, 5],
    [60, 208, 3],
    [60, 209, 8],
    [60, 210, 10],
    [60, 211, 7],
    [60, 212, 5],
    [60, 213, 7],
    [60, 214, 4],
    [60, 215, 1],
    [60, 216, 6],
    [60, 217, 8],
    [60, 218, 2],
    [60, 219, 10],
    [60, 220, 6],
    [60, 221, 8],
    [60, 222, 8],
    [60, 223, 2],
    [60, 224, 8],
    [60, 225, 3],
    [60, 226, 5],
    [60, 227, 9],
    [60, 228, 6],
    [60, 229, 10],
    [60, 230, 9],
    [60, 231, 2],
    [60, 232, 8],
    [60, 233, 2],
    [60, 234, 10],
    [60, 235, 5],
    [60, 236, 2],
    [60, 237, 3],
    [60, 238, 9],
    [60, 239, 9],
    [60, 240, 2],
    [60, 241, 6],
    [60, 242, 2],
    [60, 243, 3],
    [60, 244, 4],
    [60, 245, 9],
    [60, 246, 5],
    [60, 247, 2],
    [60, 248, 6],
    [60, 249, 4],
    [60, 250, 5],
    [60, 251, 6],
    [60, 252, 8],
    [60, 253, 7],
    [60, 254, 2],
    [60, 255, 7],
    [60, 256, 5],
    [60, 257, 8],
    [60, 258, 8],
    [60, 259, 9],
    [60, 260, 8],
    [60, 261, 10],
    [60, 262, 10],
    [60, 263, 8],
    [60, 264, 3],
    [60, 265, 1],
    [60, 266, 2],
    [60, 267, 1],
    [60, 268, 7],
    [60, 269, 6],
    [60, 270, 6],
    [60, 271, 2],
    [60, 272, 10],
    [60, 273, 6],
    [60, 274, 4],
    [60, 275, 8],
    [60, 276, 9],
    [60, 277, 9],
    [60, 278, 7],
    [60, 279, 9],
    [60, 280, 9],
    [60, 281, 10],
    [60, 282, 3],
    [60, 283, 4],
    [60, 284, 2],
    [60, 285, 6],
    [60, 286, 8],
    [60, 287, 5],
    [60, 288, 9],
    [60, 289, 2],
    [60, 290, 10],
    [60, 291, 9],
    [60, 292, 10],
    [60, 293, 2],
    [60, 294, 2],
    [60, 295, 2],
    [60, 296, 10],
    [60, 297, 1],
    [60, 298, 2],
    [60, 299, 8],
    [60, 300, 10],
    [60, 301, 6],
    [60, 302, 1],
    [60, 303, 8],
    [60, 304, 2],
    [60, 305, 4],
    [60, 306, 6],
    [60, 307, 10],
    [60, 308, 1],
    [60, 309, 5],
    [60, 310, 1],
    [60, 311, 6],
    [60, 312, 8],
    [60, 313, 9],
    [60, 314, 1],
    [60, 315, 10],
    [60, 316, 5],
    [60, 317, 7],
    [60, 318, 5],
    [60, 319, 4],
    [60, 320, 4],
    [60, 321, 7],
    [60, 322, 7],
    [60, 323, 10],
    [60, 324, 10],
    [60, 325, 1],
    [60, 326, 3],
    [60, 327, 1],
    [60, 328, 1],
    [60, 329, 6],
    [60, 330, 9],
    [60, 331, 4],
    [60, 332, 5],
    [60, 333, 8],
    [61, 208, 10],
    [61, 209, 9],
    [61, 210, 10],
    [61, 211, 10],
    [61, 212, 9],
    [61, 213, 7],
    [61, 214, 10],
    [61, 215, 7],
    [61, 216, 5],
    [61, 217, 2],
    [61, 218, 6],
    [61, 219, 9],
    [61, 220, 5],
    [61, 221, 2],
    [61, 222, 10],
    [61, 223, 10],
    [61, 224, 6],
    [61, 225, 10],
    [61, 226, 2],
    [61, 227, 7],
    [61, 228, 6],
    [61, 229, 6],
    [61, 230, 9],
    [61, 231, 10],
    [61, 232, 5],
    [61, 233, 4],
    [61, 234, 8],
    [61, 235, 6],
    [61, 236, 1],
    [61, 237, 5],
    [61, 238, 6],
    [61, 239, 6],
    [61, 240, 9],
    [61, 241, 8],
    [61, 242, 2],
    [61, 243, 8],
    [61, 244, 1],
    [61, 245, 2],
    [61, 246, 2],
    [61, 247, 3],
    [61, 248, 3],
    [61, 249, 9],
    [61, 250, 4],
    [61, 251, 9],
    [61, 252, 6],
    [61, 253, 1],
    [61, 254, 9],
    [61, 255, 10],
    [61, 256, 2],
    [61, 257, 6],
    [61, 258, 8],
    [61, 259, 5],
    [61, 260, 7],
    [61, 261, 6],
    [61, 262, 3],
    [61, 263, 6],
    [61, 264, 9],
    [61, 265, 7],
    [61, 266, 1],
    [61, 267, 7],
    [61, 268, 2],
    [61, 269, 8],
    [61, 270, 2],
    [61, 271, 4],
    [61, 272, 4],
    [61, 273, 5],
    [61, 274, 1],
    [61, 275, 10],
    [61, 276, 3],
    [61, 277, 8],
    [61, 278, 4],
    [61, 279, 8],
    [61, 280, 8],
    [61, 281, 7],
    [61, 282, 5],
    [61, 283, 8],
    [61, 284, 7],
    [61, 285, 8],
    [61, 286, 8],
    [61, 287, 7],
    [61, 288, 7],
    [61, 289, 2],
    [61, 290, 4],
    [61, 291, 9],
    [61, 292, 9],
    [61, 293, 10],
    [61, 294, 5],
    [61, 295, 10],
    [61, 296, 5],
    [61, 297, 7],
    [61, 298, 9],
    [61, 299, 3],
    [61, 300, 5],
    [61, 301, 4],
    [61, 302, 3],
    [61, 303, 10],
    [61, 304, 10],
    [61, 305, 9],
    [61, 306, 3],
    [61, 307, 5],
    [61, 308, 8],
    [61, 309, 4],
    [61, 310, 6],
    [61, 311, 10],
    [61, 312, 2],
    [61, 313, 5],
    [61, 314, 8],
    [61, 315, 10],
    [61, 316, 2],
    [61, 317, 2],
    [61, 318, 3],
    [61, 319, 6],
    [61, 320, 10],
    [61, 321, 1],
    [61, 322, 2],
    [61, 323, 4],
    [61, 324, 10],
    [61, 325, 5],
    [61, 326, 9],
    [61, 327, 8],
    [61, 328, 1],
    [61, 329, 8],
    [61, 330, 9],
    [61, 331, 4],
    [61, 332, 4],
    [61, 333, 2],
    [62, 208, 2],
    [62, 209, 5],
    [62, 210, 9],
    [62, 211, 6],
    [62, 212, 2],
    [62, 213, 8],
    [62, 214, 10],
    [62, 215, 8],
    [62, 216, 1],
    [62, 217, 3],
    [62, 218, 10],
    [62, 219, 2],
    [62, 220, 3],
    [62, 221, 6],
    [62, 222, 5],
    [62, 223, 3],
    [62, 224, 7],
    [62, 225, 8],
    [62, 226, 3],
    [62, 227, 2],
    [62, 228, 1],
    [62, 229, 8],
    [62, 230, 3],
    [62, 231, 3],
    [62, 232, 4],
    [62, 233, 6],
    [62, 234, 10],
    [62, 235, 9],
    [62, 236, 4],
    [62, 237, 2],
    [62, 238, 2],
    [62, 239, 5],
    [62, 240, 9],
    [62, 241, 6],
    [62, 242, 4],
    [62, 243, 6],
    [62, 244, 9],
    [62, 245, 1],
    [62, 246, 4],
    [62, 247, 9],
    [62, 248, 7],
    [62, 249, 7],
    [62, 250, 4],
    [62, 251, 6],
    [62, 252, 8],
    [62, 253, 4],
    [62, 254, 10],
    [62, 255, 6],
    [62, 256, 6],
    [62, 257, 7],
    [62, 258, 10],
    [62, 259, 7],
    [62, 260, 10],
    [62, 261, 6],
    [62, 262, 1],
    [62, 263, 2],
    [62, 264, 3],
    [62, 265, 1],
    [62, 266, 9],
    [62, 267, 3],
    [62, 268, 7],
    [62, 269, 1],
    [62, 270, 1],
    [62, 271, 3],
    [62, 272, 9],
    [62, 273, 6],
    [62, 274, 2],
    [62, 275, 3],
    [62, 276, 1],
    [62, 277, 4],
    [62, 278, 10],
    [62, 279, 8],
    [62, 280, 10],
    [62, 281, 10],
    [62, 282, 7],
    [62, 283, 6],
    [62, 284, 3],
    [62, 285, 5],
    [62, 286, 1],
    [62, 287, 10],
    [62, 288, 2],
    [62, 289, 8],
    [62, 290, 3],
    [62, 291, 1],
    [62, 292, 3],
    [62, 293, 7],
    [62, 294, 8],
    [62, 295, 8],
    [62, 296, 5],
    [62, 297, 5],
    [62, 298, 4],
    [62, 299, 1],
    [62, 300, 7],
    [62, 301, 8],
    [62, 302, 2],
    [62, 303, 3],
    [62, 304, 6],
    [62, 305, 3],
    [62, 306, 1],
    [62, 307, 9],
    [62, 308, 10],
    [62, 309, 10],
    [62, 310, 9],
    [62, 311, 6],
    [62, 312, 3],
    [62, 313, 3],
    [62, 314, 2],
    [62, 315, 5],
    [62, 316, 1],
    [62, 317, 9],
    [62, 318, 8],
    [62, 319, 2],
    [62, 320, 3],
    [62, 321, 10],
    [62, 322, 4],
    [62, 323, 10],
    [62, 324, 6],
    [62, 325, 3],
    [62, 326, 10],
    [62, 327, 6],
    [62, 328, 1],
    [62, 329, 2],
    [62, 330, 9],
    [62, 331, 8],
    [62, 332, 5],
    [62, 333, 9],
    [63, 208, 5],
    [63, 209, 9],
    [63, 210, 2],
    [63, 211, 7],
    [63, 212, 3],
    [63, 213, 9],
    [63, 214, 6],
    [63, 215, 8],
    [63, 216, 4],
    [63, 217, 6],
    [63, 218, 7],
    [63, 219, 3],
    [63, 220, 6],
    [63, 221, 8],
    [63, 222, 7],
    [63, 223, 2],
    [63, 224, 7],
    [63, 225, 8],
    [63, 226, 8],
    [63, 227, 9],
    [63, 228, 6],
    [63, 229, 5],
    [63, 230, 10],
    [63, 231, 1],
    [63, 232, 8],
    [63, 233, 2],
    [63, 234, 4],
    [63, 235, 7],
    [63, 236, 6],
    [63, 237, 3],
    [63, 238, 8],
    [63, 239, 2],
    [63, 240, 2],
    [63, 241, 3],
    [63, 242, 4],
    [63, 243, 9],
    [63, 244, 6],
    [63, 245, 1],
    [63, 246, 1],
    [63, 247, 4],
    [63, 248, 2],
    [63, 249, 1],
    [63, 250, 2],
    [63, 251, 10],
    [63, 252, 9],
    [63, 253, 8],
    [63, 254, 3],
    [63, 255, 4],
    [63, 256, 6],
    [63, 257, 1],
    [63, 258, 9],
    [63, 259, 5],
    [63, 260, 9],
    [63, 261, 8],
    [63, 262, 10],
    [63, 263, 3],
    [63, 264, 5],
    [63, 265, 9],
    [63, 266, 10],
    [63, 267, 1],
    [63, 268, 9],
    [63, 269, 10],
    [63, 270, 9],
    [63, 271, 5],
    [63, 272, 10],
    [63, 273, 5],
    [63, 274, 5],
    [63, 275, 5],
    [63, 276, 9],
    [63, 277, 9],
    [63, 278, 1],
    [63, 279, 6],
    [63, 280, 9],
    [63, 281, 4],
    [63, 282, 9],
    [63, 283, 6],
    [63, 284, 3],
    [63, 285, 3],
    [63, 286, 2],
    [63, 287, 1],
    [63, 288, 9],
    [63, 289, 7],
    [63, 290, 10],
    [63, 291, 4],
    [63, 292, 7],
    [63, 293, 4],
    [63, 294, 5],
    [63, 295, 1],
    [63, 296, 6],
    [63, 297, 10],
    [63, 298, 3],
    [63, 299, 10],
    [63, 300, 6],
    [63, 301, 8],
    [63, 302, 6],
    [63, 303, 2],
    [63, 304, 6],
    [63, 305, 10],
    [63, 306, 1],
    [63, 307, 4],
    [63, 308, 2],
    [63, 309, 6],
    [63, 310, 5],
    [63, 311, 3],
    [63, 312, 2],
    [63, 313, 3],
    [63, 314, 1],
    [63, 315, 10],
    [63, 316, 6],
    [63, 317, 4],
    [63, 318, 8],
    [63, 319, 3],
    [63, 320, 10],
    [63, 321, 10],
    [63, 322, 6],
    [63, 323, 1],
    [63, 324, 4],
    [63, 325, 9],
    [63, 326, 8],
    [63, 327, 1],
    [63, 328, 7],
    [63, 329, 3],
    [63, 330, 3],
    [63, 331, 9],
    [63, 332, 4],
    [63, 333, 4],
    [64, 208, 8],
    [64, 209, 9],
    [64, 210, 6],
    [64, 211, 1],
    [64, 212, 7],
    [64, 213, 3],
    [64, 214, 10],
    [64, 215, 6],
    [64, 216, 1],
    [64, 217, 6],
    [64, 218, 3],
    [64, 219, 10],
    [64, 220, 9],
    [64, 221, 4],
    [64, 222, 6],
    [64, 223, 2],
    [64, 224, 5],
    [64, 225, 6],
    [64, 226, 4],
    [64, 227, 5],
    [64, 228, 8],
    [64, 229, 8],
    [64, 230, 2],
    [64, 231, 10],
    [64, 232, 2],
    [64, 233, 7],
    [64, 234, 9],
    [64, 235, 7],
    [64, 236, 7],
    [64, 237, 7],
    [64, 238, 5],
    [64, 239, 4],
    [64, 240, 6],
    [64, 241, 8],
    [64, 242, 6],
    [64, 243, 1],
    [64, 244, 10],
    [64, 245, 8],
    [64, 246, 4],
    [64, 247, 4],
    [64, 248, 6],
    [64, 249, 6],
    [64, 250, 10],
    [64, 251, 10],
    [64, 252, 2],
    [64, 253, 6],
    [64, 254, 8],
    [64, 255, 1],
    [64, 256, 7],
    [64, 257, 6],
    [64, 258, 5],
    [64, 259, 6],
    [64, 260, 2],
    [64, 261, 4],
    [64, 262, 8],
    [64, 263, 10],
    [64, 264, 2],
    [64, 265, 8],
    [64, 266, 6],
    [64, 267, 2],
    [64, 268, 4],
    [64, 269, 2],
    [64, 270, 3],
    [64, 271, 10],
    [64, 272, 4],
    [64, 273, 3],
    [64, 274, 8],
    [64, 275, 6],
    [64, 276, 5],
    [64, 277, 10],
    [64, 278, 10],
    [64, 279, 9],
    [64, 280, 4],
    [64, 281, 2],
    [64, 282, 10],
    [64, 283, 6],
    [64, 284, 10],
    [64, 285, 7],
    [64, 286, 3],
    [64, 287, 8],
    [64, 288, 1],
    [64, 289, 4],
    [64, 290, 5],
    [64, 291, 6],
    [64, 292, 7],
    [64, 293, 2],
    [64, 294, 7],
    [64, 295, 5],
    [64, 296, 2],
    [64, 297, 1],
    [64, 298, 7],
    [64, 299, 6],
    [64, 300, 9],
    [64, 301, 3],
    [64, 302, 4],
    [64, 303, 6],
    [64, 304, 8],
    [64, 305, 3],
    [64, 306, 1],
    [64, 307, 2],
    [64, 308, 4],
    [64, 309, 4],
    [64, 310, 3],
    [64, 311, 3],
    [64, 312, 5],
    [64, 313, 1],
    [64, 314, 6],
    [64, 315, 10],
    [64, 316, 6],
    [64, 317, 4],
    [64, 318, 10],
    [64, 319, 10],
    [64, 320, 8],
    [64, 321, 3],
    [64, 322, 3],
    [64, 323, 10],
    [64, 324, 2],
    [64, 325, 2],
    [64, 326, 6],
    [64, 327, 2],
    [64, 328, 3],
    [64, 329, 6],
    [64, 330, 1],
    [64, 331, 1],
    [64, 332, 3],
    [64, 333, 8],
    [65, 208, 9],
    [65, 209, 6],
    [65, 210, 2],
    [65, 211, 4],
    [65, 212, 3],
    [65, 213, 7],
    [65, 214, 1],
    [65, 215, 4],
    [65, 216, 1],
    [65, 217, 5],
    [65, 218, 4],
    [65, 219, 6],
    [65, 220, 8],
    [65, 221, 10],
    [65, 222, 4],
    [65, 223, 10],
    [65, 224, 3],
    [65, 225, 10],
    [65, 226, 6],
    [65, 227, 3],
    [65, 228, 1],
    [65, 229, 7],
    [65, 230, 3],
    [65, 231, 1],
    [65, 232, 2],
    [65, 233, 1],
    [65, 234, 6],
    [65, 235, 5],
    [65, 236, 5],
    [65, 237, 4],
    [65, 238, 4],
    [65, 239, 6],
    [65, 240, 10],
    [65, 241, 4],
    [65, 242, 7],
    [65, 243, 5],
    [65, 244, 3],
    [65, 245, 8],
    [65, 246, 5],
    [65, 247, 9],
    [65, 248, 3],
    [65, 249, 10],
    [65, 250, 1],
    [65, 251, 3],
    [65, 252, 6],
    [65, 253, 4],
    [65, 254, 5],
    [65, 255, 3],
    [65, 256, 4],
    [65, 257, 6],
    [65, 258, 6],
    [65, 259, 3],
    [65, 260, 6],
    [65, 261, 8],
    [65, 262, 1],
    [65, 263, 4],
    [65, 264, 3],
    [65, 265, 10],
    [65, 266, 10],
    [65, 267, 2],
    [65, 268, 5],
    [65, 269, 2],
    [65, 270, 5],
    [65, 271, 3],
    [65, 272, 7],
    [65, 273, 8],
    [65, 274, 9],
    [65, 275, 2],
    [65, 276, 10],
    [65, 277, 3],
    [65, 278, 8],
    [65, 279, 9],
    [65, 280, 5],
    [65, 281, 4],
    [65, 282, 2],
    [65, 283, 9],
    [65, 284, 2],
    [65, 285, 9],
    [65, 286, 10],
    [65, 287, 10],
    [65, 288, 5],
    [65, 289, 6],
    [65, 290, 9],
    [65, 291, 7],
    [65, 292, 6],
    [65, 293, 1],
    [65, 294, 4],
    [65, 295, 7],
    [65, 296, 8],
    [65, 297, 3],
    [65, 298, 5],
    [65, 299, 9],
    [65, 300, 5],
    [65, 301, 5],
    [65, 302, 7],
    [65, 303, 1],
    [65, 304, 10],
    [65, 305, 8],
    [65, 306, 2],
    [65, 307, 6],
    [65, 308, 1],
    [65, 309, 5],
    [65, 310, 10],
    [65, 311, 8],
    [65, 312, 5],
    [65, 313, 9],
    [65, 314, 9],
    [65, 315, 2],
    [65, 316, 6],
    [65, 317, 9],
    [65, 318, 1],
    [65, 319, 1],
    [65, 320, 2],
    [65, 321, 8],
    [65, 322, 7],
    [65, 323, 5],
    [65, 324, 3],
    [65, 325, 6],
    [65, 326, 2],
    [65, 327, 10],
    [65, 328, 3],
    [65, 329, 1],
    [65, 330, 10],
    [65, 331, 9],
    [65, 332, 5],
    [65, 333, 10],
    [66, 208, 10],
    [66, 209, 8],
    [66, 210, 2],
    [66, 211, 8],
    [66, 212, 1],
    [66, 213, 1],
    [66, 214, 4],
    [66, 215, 3],
    [66, 216, 8],
    [66, 217, 6],
    [66, 218, 4],
    [66, 219, 3],
    [66, 220, 3],
    [66, 221, 2],
    [66, 222, 4],
    [66, 223, 10],
    [66, 224, 4],
    [66, 225, 10],
    [66, 226, 4],
    [66, 227, 5],
    [66, 228, 6],
    [66, 229, 2],
    [66, 230, 5],
    [66, 231, 10],
    [66, 232, 4],
    [66, 233, 3],
    [66, 234, 7],
    [66, 235, 3],
    [66, 236, 9],
    [66, 237, 2],
    [66, 238, 8],
    [66, 239, 2],
    [66, 240, 4],
    [66, 241, 1],
    [66, 242, 1],
    [66, 243, 2],
    [66, 244, 2],
    [66, 245, 9],
    [66, 246, 9],
    [66, 247, 6],
    [66, 248, 8],
    [66, 249, 10],
    [66, 250, 1],
    [66, 251, 2],
    [66, 252, 6],
    [66, 253, 5],
    [66, 254, 6],
    [66, 255, 3],
    [66, 256, 6],
    [66, 257, 1],
    [66, 258, 8],
    [66, 259, 4],
    [66, 260, 5],
    [66, 261, 1],
    [66, 262, 3],
    [66, 263, 3],
    [66, 264, 8],
    [66, 265, 10],
    [66, 266, 4],
    [66, 267, 6],
    [66, 268, 6],
    [66, 269, 5],
    [66, 270, 1],
    [66, 271, 2],
    [66, 272, 6],
    [66, 273, 3],
    [66, 274, 1],
    [66, 275, 9],
    [66, 276, 1],
    [66, 277, 7],
    [66, 278, 6],
    [66, 279, 2],
    [66, 280, 8],
    [66, 281, 2],
    [66, 282, 6],
    [66, 283, 5],
    [66, 284, 2],
    [66, 285, 10],
    [66, 286, 2],
    [66, 287, 2],
    [66, 288, 10],
    [66, 289, 6],
    [66, 290, 10],
    [66, 291, 8],
    [66, 292, 7],
    [66, 293, 2],
    [66, 294, 1],
    [66, 295, 4],
    [66, 296, 3],
    [66, 297, 2],
    [66, 298, 4],
    [66, 299, 3],
    [66, 300, 8],
    [66, 301, 3],
    [66, 302, 5],
    [66, 303, 5],
    [66, 304, 2],
    [66, 305, 5],
    [66, 306, 8],
    [66, 307, 4],
    [66, 308, 10],
    [66, 309, 3],
    [66, 310, 7],
    [66, 311, 10],
    [66, 312, 1],
    [66, 313, 9],
    [66, 314, 5],
    [66, 315, 7],
    [66, 316, 8],
    [66, 317, 9],
    [66, 318, 9],
    [66, 319, 5],
    [66, 320, 10],
    [66, 321, 4],
    [66, 322, 6],
    [66, 323, 1],
    [66, 324, 9],
    [66, 325, 6],
    [66, 326, 5],
    [66, 327, 10],
    [66, 328, 5],
    [66, 329, 3],
    [66, 330, 8],
    [66, 331, 1],
    [66, 332, 3],
    [66, 333, 7],
    [67, 208, 3],
    [67, 209, 5],
    [67, 210, 9],
    [67, 211, 2],
    [67, 212, 10],
    [67, 213, 5],
    [67, 214, 7],
    [67, 215, 1],
    [67, 216, 2],
    [67, 217, 3],
    [67, 218, 2],
    [67, 219, 5],
    [67, 220, 6],
    [67, 221, 1],
    [67, 222, 2],
    [67, 223, 5],
    [67, 224, 4],
    [67, 225, 10],
    [67, 226, 10],
    [67, 227, 9],
    [67, 228, 8],
    [67, 229, 4],
    [67, 230, 4],
    [67, 231, 9],
    [67, 232, 4],
    [67, 233, 6],
    [67, 234, 2],
    [67, 235, 4],
    [67, 236, 5],
    [67, 237, 5],
    [67, 238, 4],
    [67, 239, 9],
    [67, 240, 1],
    [67, 241, 6],
    [67, 242, 6],
    [67, 243, 1],
    [67, 244, 7],
    [67, 245, 3],
    [67, 246, 10],
    [67, 247, 1],
    [67, 248, 5],
    [67, 249, 7],
    [67, 250, 4],
    [67, 251, 2],
    [67, 252, 3],
    [67, 253, 2],
    [67, 254, 6],
    [67, 255, 4],
    [67, 256, 7],
    [67, 257, 5],
    [67, 258, 9],
    [67, 259, 2],
    [67, 260, 6],
    [67, 261, 10],
    [67, 262, 3],
    [67, 263, 8],
    [67, 264, 4],
    [67, 265, 3],
    [67, 266, 7],
    [67, 267, 6],
    [67, 268, 9],
    [67, 269, 6],
    [67, 270, 4],
    [67, 271, 9],
    [67, 272, 9],
    [67, 273, 2],
    [67, 274, 3],
    [67, 275, 3],
    [67, 276, 10],
    [67, 277, 1],
    [67, 278, 1],
    [67, 279, 2],
    [67, 280, 10],
    [67, 281, 8],
    [67, 282, 2],
    [67, 283, 3],
    [67, 284, 10],
    [67, 285, 2],
    [67, 286, 2],
    [67, 287, 5],
    [67, 288, 10],
    [67, 289, 6],
    [67, 290, 10],
    [67, 291, 8],
    [67, 292, 2],
    [67, 293, 1],
    [67, 294, 1],
    [67, 295, 7],
    [67, 296, 9],
    [67, 297, 7],
    [67, 298, 3],
    [67, 299, 1],
    [67, 300, 5],
    [67, 301, 7],
    [67, 302, 7],
    [67, 303, 2],
    [67, 304, 3],
    [67, 305, 10],
    [67, 306, 9],
    [67, 307, 3],
    [67, 308, 3],
    [67, 309, 3],
    [67, 310, 9],
    [67, 311, 5],
    [67, 312, 7],
    [67, 313, 8],
    [67, 314, 8],
    [67, 315, 1],
    [67, 316, 4],
    [67, 317, 4],
    [67, 318, 4],
    [67, 319, 8],
    [67, 320, 1],
    [67, 321, 7],
    [67, 322, 4],
    [67, 323, 8],
    [67, 324, 4],
    [67, 325, 8],
    [67, 326, 3],
    [67, 327, 5],
    [67, 328, 8],
    [67, 329, 10],
    [67, 330, 2],
    [67, 331, 4],
    [67, 332, 7],
    [67, 333, 3],
    [68, 208, 1],
    [68, 209, 10],
    [68, 210, 3],
    [68, 211, 9],
    [68, 212, 2],
    [68, 213, 6],
    [68, 214, 6],
    [68, 215, 1],
    [68, 216, 7],
    [68, 217, 8],
    [68, 218, 5],
    [68, 219, 10],
    [68, 220, 8],
    [68, 221, 8],
    [68, 222, 9],
    [68, 223, 2],
    [68, 224, 5],
    [68, 225, 5],
    [68, 226, 6],
    [68, 227, 10],
    [68, 228, 10],
    [68, 229, 8],
    [68, 230, 4],
    [68, 231, 10],
    [68, 232, 8],
    [68, 233, 7],
    [68, 234, 3],
    [68, 235, 1],
    [68, 236, 2],
    [68, 237, 8],
    [68, 238, 2],
    [68, 239, 8],
    [68, 240, 3],
    [68, 241, 9],
    [68, 242, 4],
    [68, 243, 2],
    [68, 244, 9],
    [68, 245, 6],
    [68, 246, 1],
    [68, 247, 4],
    [68, 248, 4],
    [68, 249, 1],
    [68, 250, 6],
    [68, 251, 2],
    [68, 252, 10],
    [68, 253, 4],
    [68, 254, 7],
    [68, 255, 2],
    [68, 256, 5],
    [68, 257, 4],
    [68, 258, 8],
    [68, 259, 10],
    [68, 260, 4],
    [68, 261, 10],
    [68, 262, 7],
    [68, 263, 3],
    [68, 264, 8],
    [68, 265, 6],
    [68, 266, 6],
    [68, 267, 1],
    [68, 268, 1],
    [68, 269, 10],
    [68, 270, 8],
    [68, 271, 4],
    [68, 272, 8],
    [68, 273, 1],
    [68, 274, 10],
    [68, 275, 10],
    [68, 276, 10],
    [68, 277, 1],
    [68, 278, 2],
    [68, 279, 4],
    [68, 280, 3],
    [68, 281, 1],
    [68, 282, 2],
    [68, 283, 5],
    [68, 284, 9],
    [68, 285, 6],
    [68, 286, 4],
    [68, 287, 10],
    [68, 288, 5],
    [68, 289, 4],
    [68, 290, 3],
    [68, 291, 10],
    [68, 292, 10],
    [68, 293, 4],
    [68, 294, 6],
    [68, 295, 10],
    [68, 296, 8],
    [68, 297, 7],
    [68, 298, 5],
    [68, 299, 6],
    [68, 300, 4],
    [68, 301, 7],
    [68, 302, 9],
    [68, 303, 7],
    [68, 304, 5],
    [68, 305, 4],
    [68, 306, 1],
    [68, 307, 4],
    [68, 308, 7],
    [68, 309, 1],
    [68, 310, 5],
    [68, 311, 5],
    [68, 312, 3],
    [68, 313, 3],
    [68, 314, 2],
    [68, 315, 2],
    [68, 316, 7],
    [68, 317, 8],
    [68, 318, 3],
    [68, 319, 9],
    [68, 320, 9],
    [68, 321, 4],
    [68, 322, 1],
    [68, 323, 6],
    [68, 324, 2],
    [68, 325, 8],
    [68, 326, 1],
    [68, 327, 6],
    [68, 328, 1],
    [68, 329, 8],
    [68, 330, 4],
    [68, 331, 5],
    [68, 332, 7],
    [68, 333, 4]
]

AvailableSlots = {
    1:{
        "10:30:00":[],
        "11:00:00":[],
        "11:30:00":[],
        "13:00:00":[],
        "13:30:00":[],
        "14:00:00":[],
        "14:45:00":[],
        "15:15:00":[],
        "15:45:00":[],
        "16:30:00":[],
        "17:00:00":[],
        "17:30:00":[],
        "18:15:00":[],
        "18:45:00":[]
    },
    2:{
        "10:30:00":[],
        "11:00:00":[],
        "11:30:00":[],
        "13:00:00":[],
        "13:30:00":[],
        "14:00:00":[],
        "14:45:00":[],
        "15:15:00":[],
        "15:45:00":[],
        "16:30:00":[],
        "17:00:00":[],
        "17:30:00":[],
        "18:15:00":[],
        "18:45:00":[]
    }
}

TalkInfo = [
    [41, "A Lullaby by Limp Bizkit",
        [41], 
        [
            [115, 'Nu-Metal'],
            [116, 'Rap'],
            [117, 'Rock'],
        ],
        66,
        "Popular Talk"
    ],
    [42, "A Disciple Dance",
        [42],
        [
            [118, 'Christian Metal'],
            [119, 'Christian Rock']
        ],
        64,
        "Popular Talk"
    ],
    [43, "A Skillet Skydive",
        [43],
        [
            [120, 'Christian Metal'],
            [121, 'Christian Rock']
        ],
        59,
        "Unpopular Talk"
    ],
    [44, "A Drag by Decypher Down",
        [44],
        [
            [122, 'Christian Rock'],
            [123, 'Core']
        ],
        62,
        "Unpopular Talk"
    ],
    [45, "Hakita's Hoe Down",
        [45],
        [
            [124, 'Rock'],
            [125, 'Breakcore'],
            [126, 'Intense']
        ],
        63,
        "Popular Talk"
    ],
    [46, " A Slipknot Serenade",
        [46],
        [
            [127, 'Heavy Metal'],
            [128, 'Nu-metal']
        ],
        60,
        "Unpopular Talk"
    ],
    [47, "My Chemical Rodeo",
        [47],
        [
            [129, 'Emo'],
            [130, 'Rock'],
            [131, 'Punk']
        ],
        69,
        "Popular Talk"
    ],
    [48, "Green Week",
        [48],
        [
            [132, 'Punk'],
            [133, 'Rock']
        ],
        68,
        "Popular Talk"
    ],
    [49, "Beyond Hate and Life",
        [49],
        [
            [134, 'Nu-Metal'],
            [135, 'Heavy Metal'],
            [136, 'Groove']
        ],
        59,
        "Unpopular Talk"
    ],
    [50, "A Taste of the KoRn",
        [50],
        [
            [137, 'Nu-Metal'],
            [138, 'Groove']
        ],
        50,
        "Unpopular Talk"
    ],
    [51, "Dream Palace",
        [51],
        [
            [139, 'Progressive Metal'],
            [140, 'Heavy Metal']
        ],
        67,
        "Popular Talk"
    ],
    [52, "The Preach from JP",
        [52],
        [
            [141, 'Heavy Metal'],
            [142, 'Hard Rock']
        ],
        67,
        "Popular Talk"
    ],
    [53, "Iron Lady's Show",
        [53],
        [
            [143, 'Heavy Metal'],
            [144, 'Hard Rock'],
        ],
        56,
        "Unpopular Talk"
    ],
    [54, "Pistol's and Peonies",
        [54],
        [
            [145, 'Hard Rock']
        ],
        64,
        "Popular Talk"
    ],
    [55, "Father of the Cockroach",
        [55],
        [
            [146, 'Nu-Metal'],
            [147, 'Pop-Rock']
        ],
        61,
        "Unpopular Talk"
    ],
    [56, "Afterhours in the Park",
        [56],
        [
            [148, 'Nu-Metal'],
            [149, 'Rap'],
            [150, 'Heavy Metal']
        ],
        63,
        "Popular Talk"
    ],
    [57, "Confused",
        [57],
        [
            [151, 'Heavy Metal'],
            [152, 'Rap']
        ],
        63,
        "Popular Talk"
    ],
    [59, "Bringing to Being",
        [59],
        [
            [155, 'Rap'],
            [156, 'Hard Rock']
        ],
        55,
        "Unpopular Talk"
    ],
    [60, "Beneath Dusk",
        [60],
        [
            [157, 'Heavy Metal'],
            [158, 'Industrial']
        ],
        70,
        "Popular Talk"
    ],
    [61, "Tenacious Danger",
        [61],
        [
            [159, 'Argent Metal'],
            [160, 'Heavy Metal']
        ],
        72,
        "Popular Talk"
    ],
    [62, "Immense Lavender",
        [62],
        [
            [161, 'Hard Rock']
        ],
        63,
        "Popular Talk"
    ],
    [63, "The King's Wife",
        [63],
        [
            [162, 'Hard Rock'],
            [163, 'Pop']
        ],
        65,
        "Popular Talk"
    ],
    [64, "Steel",
        [64],
        [
            [164, 'Heavy Metal']
        ],
        66,
        "Popular Talk"
    ],
    [65, "Lion's Rival",
        [65],
        [
            [165, 'Heavy Metal'],
            [166, 'Groove']
        ],
        58,
        "Unpopular Talk"
    ],
    [66, "Impending Mars",
        [66],
        [
            [167, 'Hard Rock'],
            [168, 'Intense']
        ],
        54,
        "Unpopular Talk"
    ],
    [67, "Crimson",
        [67],
        [
            [169, 'Hard Rock'],
            [170, 'Groove']
        ],
        54,
        "Unpopular Talk"
    ],
    [68, "Frontcent",
        [68],
        [
            [171, 'Hard Rock'],
            [172, 'Metal']
        ],
        61,
        "Unpopular Talk"
    ]
]

# Simply for monitoring and testing
def track_individual(individual, generation, fitness_score, file_path="tracking_individual.txt"):
    """Write the individual's state and fitness to a file for each generation."""
    with open(file_path, "a") as file:
        file.write(f"Generation {generation} - Fitness Score: {fitness_score}\n")
        for day, slots in individual.items():
            file.write(f"Day {day}:\n")
            for time, session in slots.items():
                file.write(f"  {time}: {session}\n")
        file.write("\n")

def GeneticAlgorithm():
    global mutateRate

    """ACTUAL LOOP"""
    # Initialize population
    start_time = tm.time()  # Record the start time
    population = generatePopulation(populationSize)
    prevAvgFitness = 0
    print(f"Generated Population, initial mutation rate: {mutateRate}")

    tracker = 7
    tracking_file = f"track_individual_{tracker}.txt"
        
    # Clear previous contents of the tracking file at the start of the run
    open(tracking_file, 'w').close()

    # Iterate through generations
    for generation in range(generations):
        print(f"Generation no: {generation + 1} --> {len(population)}")

        # Evaluate fitness of each schedule in the population
        fitnessScores = evalFitness(population, Deleg2Talks)
        currentAvgFitness = sum(fitnessScores) / len(fitnessScores)
        print("Found fitness scores and the average for the population of this generation")

        # REMOVE LATER - tracker
        tracked_individual = population[tracker]
        tracked_fitness = fitnessScores[tracker]
        track_individual(tracked_individual, generation, tracked_fitness, tracking_file)

        # Update mutatation rate dynamically
        mutateRate = updateMutationRate(mutateRate, prevAvgFitness, currentAvgFitness)
        prevAvgFitness = currentAvgFitness
        print(f"New mutation rate: {mutateRate}")

        # Select parents for crossover
        #print(population[tracker][1].keys())
        parents = selectParents(population, fitnessScores)
        print("Parents found")

        # Perform crossover to create new generation
        children = crossover(parents, numSessions)
        print("Children produced by two point crossover for each pair of parents")
        # Mutate children
        mutants = []
        for child in children:
            mutatedChild = mutate(child, mutateRate) #
            mutants.append(mutatedChild)
        print("Children mutated")

        # Apply selective elitism
        elites = selectiveElistism(population, fitnessScores, generation, generations)

        # Replace old population with new generation
        population = mutants + elites

    print("Genetic Process complete")

    # Select best schedule as optimized solution
    bestSchedule = None
    bestFitness = float('-inf')

    for schedule in population:
        fitness = calculateScheduleScoreParallel(schedule, Deleg2Talks)

        if fitness > bestFitness:
            bestSchedule = schedule
            bestFitness = fitness

    print(f"BEST SCHEDULE -> {bestFitness}:" )
    for day, agenda in bestSchedule.items():
        print(day)
        for timing, slot in agenda.items():
            print(timing, ": ", slot)

    end_time = tm.time()  # Record the end time
    total_time = end_time - start_time  # Calculate the total time taken
        
    average_generation_time = total_time / generations  # Calculate the average time per generation
    print(f"\n---------------\nTotal Time taken: {total_time}\nAverage time per generation computation: {average_generation_time}\n---------------")

if __name__ == '__main__':
    freeze_support()

    GeneticAlgorithm()